1 Algorythmen und Datenstrukturen leichte erklärt
    Bespiele für Algorythmen:
    Sortieren
    YouTube-Empfehlungen
    Google-Suche
    NPCs in Games
    Routenplanung
    News-Feed


2 Bedigungen und erste Beispiele
    Berechnung A mit 3 Bedinungen
        falls X gilt dann Berechnung B
        falls Y gilt dann Berechnung B'
        sonst dann Berechnung B''
    Beispiel:
        Algo Sortiere_Zwei_Werte: (Wert_A, Wert_B)
        Falls Wert_A < Wert_B: Klein<-Wert_A, Groß<-Wert_B
        Falls Wert_A >= Wert_B: Klein<-Wert_B, Groß<-Wert_A
        Ergebnis Klein, Groß


3 Algorithmisches Denken und Schleifen
    Algorithmus "Spiel"
    Solange wir im Spiel sind
        Leertaste => Springen
        Rechts Pfeil => nach Rechts laufen
    Schleife springt zurück zu Solange


4 Datenstrukturen einfach erklärt
    langsame und schnelle Datenstrukturen
    z.B. Array, Linked List, Queues, Map, Set, Graph, Baum


5 Laufzeitanalyse / Landau Notation / O-Notation
    O(n) jedes Element wird 1x angegriffen (von oben nach unten)
        => z.B. wenn ein bestimmtes Element gesucht wird
    O(n²) jedes Mal alle Element anfassen wenn ein Element gesucht wird
        => z.B. bei Elementvergleichen
    O(1) Direktzugriff
        => das 26. Element lesen


6 Array
    praktisch in allen Programmiersprachen       
    grundsätzlich sehr unflexibel beim verändern
    schnell: direkter Zugriff auf Element x
    langsam: einfügen, suchen, löschen


7 Linked List
    Jedes Element zeigt zum nächsten
    Einfügen/Löschen von Elementen sehr schnell (im Gegensatz z.b. zu Arrays)
    Zugriff und Suchen sehr langsam (es müssen alle Elemente angefasst werden
    => vor allem geeignet wenn viel angepasst wird - wenig gelesen
    Doubled Linked List => kennen nicht nur Nachfolger sondern auch den Vorgänger des Elements
    

8 Queues / FIFO First In First Out
    nur 2 Funktionen - ist wie eine Warteschlange
    Push => Element an der ersten Stelle einfügen
    Pop => letztes Element abschneiden
    Stack / LIFO Last In First Out
    Push / Pop bezieht sich immer auf das letzte Element
    Einfügen / Löschen => Schnell
    Zugriff / Suchen => Langsam
    
    
9 Sets
    Elemente im Set sind einzigartig - keine doppelten Elemente möglich
    

10 Maps / HashMaps
    Immer Zuordnung von Schlüssel zu Wert
    Zuweisung zwischen Schlüssel und Wert erfolgt mittels Hashfunktion h


11 Die Binäre Suche
    Sortierte Liste wird dafür benötigt
    Liste wird geteilt und geschaut ob gesuchtes Element links oder rechts der Mitte ist
    Dann wird der jeweilige Teil genommen usw. bis die gesuchte Zahl gefunden wird


12 Binäre Suche in Python
    siehe BinarySearch.py


13 Selection Sort
    Z.b. um eine Liste zu sortieren
    Kleinstes Element wird ganz vorne eingefügt und getauscht
    Danch wird das kleinste Element ab dem zweiten gesucht und so weiter
    Komplexität: O(n²) - ist nicht gut für einen Sortieralgorythmus
    Sortierung erfolgt InPlace - Sortierung innerhalb eines Arrays möglich - braucht wenig Speicher


14 Selection Sort in Python
    siehe SelectionSort.py


15 Insertion Sort
    Algo bildet neue (sortierte Liste)
    Erstes Element bleibt gleich
    nächste Element wenn kleiner wird als erstes eingefügt
    drittes Element wird dann wieder entsprechend eingeordnet
    => jedes mal muss die gesamte Ergebnisliste durchlaufen werden
    => Sortierung nicht in place (zweite Ergebnisliste wird benötigt)


16 Insertin Sort in Python
    siehe InsertionSort.py


17 Bubble Sort
    vergleicht erste beiden Elemente und werden bei Bedarf vertauscht
    nächsten beiden Elemente werden verglichen und bei Bedarf vertauscht
    nach einem Lauf steht der größte Werte ganz hinten - muss nicht mehr angegriffen werden
    nach jedem Lauf ist dann an der letzten Stelle ein Wert dazugekommen sortiert
    => inPlace (keine zweite Ergebnisliste benötigt)


18 Bubble Sort in Python
    siehe BubbleSort.py


19 Brute Force Algorythmen
    es wird komplett alles ausprobiert (mit "brutaler Gewalt")
    z.B. ein Sudoko komplett lösen - alles ausprobieren
    z.b. Hashcracken, Sudoko, Passwörter cracken










    
    
    
    
    
    
    

    

    


