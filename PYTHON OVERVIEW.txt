###########
### TOC ###
###########

# MODULE (general)
# VIRTUALENV
# INTELLIJ IDEA IDE
# OPERATORS and INPUTS
# RANDOM, SECRETS
# STRING
# REGEX
# LISTS and TUPELS
# DICTIONARY
# SETS  
# CONTROL STRUCTURES and ITERATIONS (if, for, while)
# FUNCTIONS, DECORATORS
# GENERATORS, YIELD
# LAMBDA
# CLASSES
# TXT (handling txt files)
# JSON (handling JSON)
# XML (handling XML)
# URLLIB (handling URLs,links)
# MODULE - CSV (handling CSV)
# MODULE - GSPREAD (API for Google Sheets)
# MODULE - OPENPYXL (working with excel worksheets)
# MODULE - XLWINNGS (working on the fly with open excel worksheets)
# MODULE - WIN32COM (creating worksheets as pdf from xlsx)
# MODULE - PyPDF2 (working with pdfs)
# SQL (working with MySQL / MariaDB)
# SQL ALCHEMY
# DATES, DATETIME, CALENDAR, TIMEIT, TIME, SYS, CTYPES
# MODULE - Currencyconverter (currency conversion)
# MODULE - Countries, Currency, Language (handling codes for countries, currency, language)
# MODULES - SMTPLIB, MIMEText (sending emails)
# MODULE - PATHLIB (interacting with the operating system)
# MODULE - OS (interacting with the operating system)
# MODULE - LOGGING
# MODULE - UNITTEST
# MODULE - COLLECTIONS (counter, defaultdic)
# MOUULE - ITERTOOLS (products, combinations)
# MODULE - NUMPY (basis for different other modules)
# MODULE - PANDAS (analyzing and working with data)
# MODULE - MATPLOTLIB (working with charts)
# MODULE - SELENIUM (browser automatization)
# MODULE - BEAUTIFUL SOAP (webscraping)
# MODULE - REQUESTS (workings with APIs)
# MODULE - PYQT (making GUIs)
# MODULE - TKinter (making GUIs)
# MODULE - PYGAME (making games)
# PYINSTALLER (generate python programs to executables)
# VIRTUAL BOX (eg. for MacOS)



----------
###### MODULE
import math                      # Import python module
from math import ceil            # Import specific function of a module
import numpy as np               # Import a module with abbreviation
if __name__ == '__main__':       # When directly called - programm is running from here
python --version				 # Check which python version is installed
----------



----------
###### VIRTUALENV
pip install virtualenv                                     # Install virtualenv
pip list                                                   # Global packages installed
where python                                               # Shows where the python-file is (Windows)
which python                                               # Shows where the python-file is (Linux)
virtualenv pj1_env                                         # Create new virtual environment pj1_env
project1_env\Scripts\activate                              # Activate environment pj1_env
    when activated: pip list                               # Now only shows the installed modules for the virtual environment
    pip install package                                    # Only installs in the activated virtual environment
pip freeze --local > requirements.txt                      # Extracts all the modules / dependencies to a txt-file 
deactivate                                                 # Go back to the global environment
virtualenv -p C:\..path to..\Python37\python.exe py37_env  # Create new virtual env with specific python-version
py37_env\Scripts\activate                                  # Activate new virtual env named py37_env
python --version                                           # Shows the used python version in the virtual env
pip install -r requirements.txt                            # Install all the packages from requirment.txt
----------



----------
###### INTELLIJ IDEA IDE
Ctrl + Alt + F7				# Find usages
Ctrl + F    				# Find in File
Ctrl + R     				# Replace in File
F3							# Find next
Ctrl + G					# Goto line
Ctrl + E					# Recent opened files
Ctrl + TABLE				# File switcher
Ctrl + D					# Copy / Duplicate lines	
Ctrl + (Shift) + W			# Select / deselect parts of the code step by step
Alt Enter					# Suggestions for fix error, function informations
Alt 1						# Open the project windows (on the left side)
Alt + F7					# Show usage of the variable, function, class
Esc							# Focus back on the editor window
----------



----------
###### OPERATORS and INPUTS
import math                     # Import module for math calculations
5 // 2                          # Result without Decimals (=> 2)
7 % 2                           # Modulo / Rest of the division (=> 1)
d,e,f = 4,5,6                   # Assigment of several varaibles
a,b = b,a                       # Change / swap 2 values
a += 1                          # Increase value by one
i = 1_000_000				    # For better readability - "_" are possible using long num-values (will be ignored)
round (77.2321, 2)              # Value is rounded to two decimal places => 77.23
str(5), float("5"), int("5")    # Conversion to String / Float / Int
abs(-2)                         # Outputs absolute value => 2
int(input("Alter?"))            # Input age and change to int
type(var)                       # Returns the type of a variable
dir(var)                        # Shows all available methods and attributes for the object as list
isinstance(x,float)             # Check if x has type format float
isinstance(x,str)               # Check if x has type format string
x = float("inf")                # Set var to max-value (float infinite)
math.sqrt(9)                    # Calculates the sqrt of the value => 3
if "myVar" in locals():         # Check if a variable exists
sys.argv[1:].upper()            # Check for argument which is given when starting the program
print("Text")					# Print "Text" (with a linebreak \n at the end)
print("Text", end="-")			# Print with end-statement (next print will be in the same line
print()							# Print linebreak \n
----------



----------
###### RANDOM, SECRETS
# random: unsecure, reproducable with seeds
# secret: secure, not reproducable
import random					# Import random module - fast, but not very secure
random.randint(1,6)             # Random int number between 1 and 6 like a cube
random.uniform(1,3)				# Random float number between 1 and 3 
random.random()					# Random value between 0 and 1 in float format - eg. 0.16394553
random.uniform(1,10)			# Random float in the range from 1 to 10
random.normal(0,1)				# Random value for standard deviation
random.choice(list)             # Choose random entry from a list
random.sample(list,3)           # Choose 3 random (unique) entries from the list
random.choices(list,k=3)	    # Choose 3 random entries from the list (possible to be the same)
random.shuffle(l)				# Shuffle the content of a list
random.seed(1)					# Can reproduce the same results (unsecure)

import secrets					# Import secrets module - for security reasons (is slower)
secrets.randbelow(10)			# Random int in the range from 0-10 (10 excluded)
secrets.randbits(4)				# Random int with 4 bits (highest possible value is 15 - 1111)
secrets.choice(l)				# Random choice (which is not reproducable)
----------



----------
###### STRINGS
# ordered, immutable, text representation
s = "this is a test"							# Define a string
s = "this \n text"								# String with linebreak \n
s = "this \t text" 								# String with tab between the words
s = """this \									# Define string over more lines in editor with
	and this"""
c = s[0]										# first char of a string
c = s[-1]										# last char of a string
s = "text %s bla" % var							# Insert variable in string oldest method (%s for string, %i for int, %f for float, %.2f for 2 decimals)
s = "text {} bla".format(var)					# Insert variable in string old method (:.2f for 2 decimals)
s = f"text {var} bla"							# Insert variable in string new method
"{0} like, {0} especially {0} 					# Multiple use
but {1}".format("Joe", "noodles")    							
s.find ("ist")                                  # Returns the index where the text is found
s.count ("i")                                   # Counts the occurrence of a text
[n for n in range(len(txt)) if txt.find('/', n) == n]	# Return all findings of the search string ("/") in the other string (txt)
[x.start() for x in re.finditer('ist', s)]      # Returns all indexwa as a list (needs import re)
s = s.lower()                                   # Lowercase the whole string
s = s.upper()                                   # Capitalize the whole string
s = s.capitalize()                              # Capitalize the first char
s = s.title()                                   # Capitalize the first char of all words
s.startswith("H")								# Check if the string is starting with char "H"
s.endswith("H")	      							# Check if the string is ending with char "H"
s.split()                                       # Split the words in a list
s.splitlines()                                  # Split sentences after line breaks
s = s.strip()                                   # Delete all whitespaces at the beginning and the end
s = s.replace("e","X")                          # Replacement of two strings
s.isdigit()                                     # TRUE if the whole string are digits
s.isalpha()                                     # True if the whole string are no digits
s2 in s                                         # TRUE if string2 is in strings1
l = list(s)                                     # Change string to list with all single chars
ord(char)                                       # Convert char to ASCII value
chr(ascii)                                      # Convert ASCII value to char (eg. 65=A, 97=a)
hashlib.md5(s).encode('utf-8')).hexdigest()     # Outputs hashvalue oif the string (needs import hashlib)
exec(print("hello"))                            # Execute statement in a string => hello
eval("2+2")                                     # Gives the value of an expression => 4
my_string[::-1]									# Reverse a string
repr(s)											# Print string with special characters
----------



----------
###### REGEX
import re
https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285		# Information about regex handling
pattern = re.compile("^[0-9]{4}-[0-9]{2}$")                		# Find str with 4xdigits + "-"char + 2xdigits
pattern.match(s)                                               	# Check if pattern matches - <> None when matches
re.sub("\d","",s)												# Replace all digits in string with blank
re.sub(r'([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', r'\1 ', "txt")	# Insert blank before every capitalized word eg. "CostOfRevenue" => "Cost Of Revenue"
----------



----------
###### LIST
#ordered, mutable, allows duplicate elements
l = []                                           # Define empty list
l1,l2,l3,l4 = ([] for i in range(4))		     # Define several empty lists (NOT use l1=l=l3=[] => this would be the SAME list)		
l = [4,5,6]                                      # Define list with content
l = list(range(20))                              # Define list - content is list from 0 to 19
l = ["" for x in range(8)]                       # Define list with 8 empyt strings
l = [x.upper(for x in l)]                        # Uppercase the whole list
l = [["" for x in range(5)] for x in range(5)]   # Define a nested list with 5x5
l1 + l2											 # Add both lists together (to a new list)	
l.append(1)                                      # Add 1 element to the list at the back
l.extend([6,5,4])                                # Add several elements to the list at the back
l.insert(3, "xyz")                               # Insert an element at the index-position 3
l.index("xzy")                                   # Returns index position of element "xyz"
l.pop()                                          # Delete last element from list
l.pop(0)                                         # Delete first element from list
l.sort()                                         # Sort list ascending
l.sort(reverse=True)                             # Sort list descending
l_sort = sorted(l)                               # Sort list and store it in a different independent list
l.sort(key=len)									 # Sort list by len of elements
l.reverse()                                      # Reverse the complete list
l_reverse = revrsed(l)                           # Reverse complete list and store it in different independent list
del l[2]                                         # Delete element at index position 2
l.remove("abc")                                  # Delete element with this value from the list
l.clear()                                        # Delete complete content of the list (same as l = [])
min(l)                                           # Find smallest element in the list
max(l)                                           # Find greatest element in the list
max(mylist, key=len)							 # Find longest string in the list
len(max(mylist, key=len))						 # Find lenght of longest string in the list
sum(l)                                           # Sum of all elements in the list
2xls_sum  = [sum(pair) for pair in zip(l1, l2)]  # Pair Sorting from 2 lists (1 with 1, 2 with 2, 3 mit 3, aso.) 
len(l)                                           # Count of elements in list
l.count("a")									 # Count of occurence of the element "a" in the list	
l2 = l1											 # No seperate copy of the list (updates in both lists)
l2 = l.copy()                                    # Separate individual copy of the list (no updates in both lists)
l2 = l[:]                                        # Separate individual copy of the list - 2nd variant
l2 = list(l)                                     # Separate individual copy of the list - 3rd variant
l[0]                                             # First element
l[-1]                                            # Last element
l[-3:]                                           # Last 3 elements
l[2:4]                                           # Elements from index position 2 to 3
l[:2]                                            # Elements from 0 to 1 (exclusive index position 2)
l[2:]                                            # Elements from index position 2 to the end of the list
l[::2]                                           # Every second element [start:end:step]
9 in l                                           # Check if element is in list
if any(x in string for x in ["ab","cd","de"]):   # Check if any elements from the list are in the string
if all(x in string for x in ["ab","cd","de"]):   # Check if all elements from the list are in the string    
if all(x not in string for x in ["ab","cd""]):   # Check if all elements from the list are NOT in the string    
for i in l:                                      # Iterate through list content
for i in range(len(l)):                          # Iterate through list with index
for idx, cont in enumerate(l):                   # Iterate through list with index and content
for x,y in zip(l1,l2):							 # Iterate through 2 lists pair-wise (stops when the shorter list is reached)
', '.join(l)                              		 # Create string with elements joined together with ", " eg. ["a","b","c"] => a, b, c
a = [1,2,3,4,5]
list(map(lambda x: x*2, [1,2,3,4,5]))			 # List is mapped with the lambda function => [2,4,6,8,10]
c=[x*2 for x in [1,2,3,4,5]]					 # Also possible with list comprehension => [2,4,6,8,10]
list(filter(lambda x: x%2==0, [1,2,3,4,5]))		 # List is filtered with lambda for even numbers => [2,4]
c=[x for x in [1,2,3,4,5] if x%2==0]			 # Also possible with list comprehension => [2,4]
zip([1,2,3],[4,5,6])							 # Build paris as tuple => (1,4),(2,5),(3,6)

# Check if list is all unique					 # Check if list is all unique
def all_unique(lst):
    return len(lst) == len(set(lst))
all_unique(l)
----------



----------
######TUPLE
# ordered, immutable, allows duplicate elements
# working can be more efficient than with lists - especially with big data - regarding space and runtime
t = (4,5,6)										# Create a tuple
t = tuple([3,4,4]								# Create a tuple from a list
t[]												# Selection / slicing of elements - same as with lists
l = list(t)										# Change tuple to list
t = tuple(l)									# Change list to tuples
a,b,c = (0,1,2)									# Assigning vars to tuple-elements (a=0, b=1, c=2)
f,*m,l = (0,1,2,3,4)							# Assigning to tuple-values (f=0, m=[1,2,3], l=4)
----------



----------
###### DICTIONARY
# key-value pairs, unordered (till version 3.7), mutable
d = {}                                               # Define empty dict
d = {"one": 1, "two": 2, "three": 3}                 # Define dict with content
d = dict(one=1,two=2,three=3)						 # 2nd way to defince a dict with content
d = dict([("one",1),("two",2),("three",3)])          # Define dict with content (with dupels)
d = dict([["one",1],["two",2],["three",3]])          # Define dict with content (with pairs in nested list)
d = dict(zip(["one","two","three"], [1,2,3]))        # Define dict with 2 different lists (1x keys and 1x values)
d["two"]                                             # Access value with key element
key = list(d.keys())[list(d.values()).index(v)]		 # Find key for specific value (v) in dict
list(d.keys())                                       # Read keys from dict to list
list(d.values())                                     # Read values from dict to list
len(d)                                               # Count of entries in dict
"three" in d                                         # Check if key is in dict (true / false)
d["four"] = 4                                        # New entry for dict (key = "four", value = 4)
del d["one"]                                         # Delete specific key in dict
mydict[new_key] = mydict.pop(old_key)                # Rename dict-keyname
combined_dict = {**d1, **d2}                         # Combine 2 dicts
if "xyz" in d:										 # Check if key is in dict
d2 = d												 # Copying a dict (all changes will be made in BOTH dicts)
d2 = d.copy()										 # Copying a dict (dicts will be handled seperate)
d2 = dict(d)										 # Copying a dict 2nd method (dicts will be handled seperate)
d.update(d2)										 # Dict d get updated with d2 (all existing keys are overwritten - and new added)
for key in d.keys():                                 # Iterate through dict keys
for key in sorted(d.keys()):                         # Iterate through sorted dict keys ascending
for key in sorted(d.keys(),reverse=True):            # Iterate through sorted dict keys descending
for val in d.values():                               # Iterate through dict values
for key, val in d.items():                           # Iterate through keys and values of the dict
{k: v for k, v in sorted(chars.items(),              # Sort dict descending according to values (=item[1])
         key=lambda item: item[1], reverse=True)}  
{k: v for k, v in sorted(chars.items(),              # Sort dict descending according to keys (=item[0])
         key=lambda item: item[0], reverse=True)}  
{k: v for k, v in sorted(chars.items(),              # Dict sorted: 1st value-desc (x[0]) - 2nd key-ascnd (-x[0])
         key=lambda x: (-x[1],x[0]))}
----------



----------
###### SETS
# unordered, mutable, no duplicates                   
s=set()					# Define empty set - {} would define a dict and not a set
s = {1,1,2,2,3,4}       # Define set with content
s = set("Hello")        # Define empty set - returns: {"o","l","H","e"}
s2 = {1,7,8}            # Define second set
s.add(5)                # Add element in set1
s.update([10,11,12])    # Add several elements to set1
s & s2                  # Intersection of 2 sets (same as: s.intersection(s2))
s | s2                  # Untion of 2 sets (same as: s.union(s2))
s - s2                  # Difference of 2 sets (same as: s.difference(s2))
s <= s2                 # True if s is subset from s2 (same as: s.issubset(s2))
3 in s                  # Check if element is in set
s.clear()				# Clear the set
s.pop()                 # Delete lowest elmeent in set
s.remove(5)				# Delete element 5 from set - but key error possible
s.discard(5)            # Delete element 5 from set - NO key error possible
for i in s:             # Iterate through set content
s2 = s1					# Copying a set (all changes will be made in BOTH sets)
s2 = s.copy()			# Copying a set (set will be handled seperate)
s2 = set(s)				# Copying a set 2nd method (set will be handled seperate)
s = frozenset(1,2,3)	# Define a frozenset - no changes are possible in the set - union, intersection aso. will work
----------



----------
####### MODULE - COLLECTIONS
#Counter, namedtuple, OrderedDict, defaultdict, deque
### COUNTER
from collections import Counter
colors = ['blue', 'blue', 'red', 'red', "red"]
counter = Counter(colors)									# Creates dict with counts => {'red': 3, 'blue': 2} in ordered form
counter.most_common(1) 		                           		# Outputs the element with the most counts as tuple
counter["red"})            		                            # Outputs the occurence of the value "red" => 3

###NAMEDTUPLE
from collections import namedtuple
Point = namedtuple("Point","x,y")							# Creates class with tumple
pt = Point(1,-4)											# Creates Point(x=1,y=-4)
print(pt.x, pt.y)											# Shows 1 and -4

###ORDEREDDICT
not necessary anymore in the newer python versions
is allready implemented in the regular dict-type) 

### DEFAULTDIC
d = defaultdict(int)	# Create defaultdict and define default-type
d["xyz"]				# No key error when when key not in the dict => default-type value 0 is outputed

### DEQUE
from collections import deque
d = deque()				# Create deque (optimized for working with elements at the end or beginning of the list)
d.append(1)				# Add element at the end
d.appendleft(2)			# Add element at the beginning
d.extend([1,2]			# Add list of elements at the end
d.extendleft([1,2])		# Add list of elements at the beginning (in reversed order so 2,1)
d.pop()					# Delete element at the end
d.popleft()				# Delete element at the beginning
d.clear()				# Clear entire list
d.rotate(2)				# Shift all elements 2 places to the right
d.rotateleft(-1)			# Shift all elements 1 place to the left
----------



----------
###### CONTROL STRUCTURES and ITERATIONS
if x>10: pass                # If / elif / else
elif x> 10: pass
else: pass

for i in range(5):           # 5 iterations from 0 to 4
for i in range(0, 5, 1)      # 5 iterations from 0 to 4 (start, end, step)
for i in range(4, -1, -1)    # Iterations descending from 4 to 0

while x < 4:                 # While loop with break condition
while True:                  # Endless while loop - has to be exited with break
break                        # Break loop completely
continue                     # Break actual loop run - continue with next loop run
----------



----------
###### FUNCTIONS, DECORATORS
def add(x=0,y=0):               	# Define function - with default value 0 if no input is given
    erg = x+y                   	# Calculation in function
    return erg                  	# Return value from the function

def pet (animal,n1=None,n2="x") 	# Optional argument in the funtction (first element is must - second optional)   
pet("Cat")                      	# Calling function with n1=None and n2 = "x"
pet("Cat","name")					# Calling function with n1=name and n2 = "X"
pet("Cat",n2="xyz") 				# Calling function with n1=None and n2 = "xyz" (third parameter has to be named when calling)


def varargs(*args): print(args) 	# Function with infinite arguments
varargs(1,2,3)                  	# Oututs (1,2,3)

def keyword_args(**kwargs):
    print(kwargs)
keyword_args("a"=3, "b"=4)      	# Outputs {"a":3, "b":4}  

#decorator template
def my_decorator(func):				# Define decorator
  @functools.wraps(func)
  def wrapper(*args,**kwargs):		# Decorator with * arguments
	  #Do...					 	# Do something before the functions
	  result=func(*args,**kwargs)	# Run the function
	  #Do...					 	# Do something after the functions	  
	  return result					# Return the results from the function
  return wrapper

#decorator
extend behaviour of a function with a decorators
def start_end_decorator(func):		# Define the decorator with function "func" as input-parameter
	def wrapper():					# Inside the decorator a wrapper function has to be defined
		print("Start")				# Decorated code which is executed before the core code from the function
		func()						# Calling the function itself
		print("End")				# Decorated code which is executed after the core code from the function
	return wrapper					# Results from the decorator have to be given back
@start_end_decorator				# Defines this decorator for the following function "print_name"
def print_name():					# Normal content of the function
	print("xyz")					# Core functionality of the function
print_name()						# Now when the function is executed - outputs not only "xyz" - also "Start" before and "End" after 	

#decorator with function arguments
def start_end_decorator(func):		# Define the decorator with function "func" as input-parameter
	def wrapper(*args,**kwargs):	# Inside the decorator a wrapper function has to be defined
		print("Start")				# Decorated code which is executed before the core code from the function
		result = (*args,**kwargs)	# Calling the function itself
		print("End ")				# Decorated code which is executed after the core code from the function
		return result
	return wrapper					# Results from the decorator have to be given back
@start_end_decorator				# Defines this decorator for the following function "add5"
def add5(x):						# Normal content of the function with one argument
	return x + 5					# Core functionality of the function
result = add5(10)					# Outputs "Start" => "End" => 15
print(result)		
----------



----------
###### GENERATORS, YIELD
# very memory efficient
def mygenerator():					# Defines the generator with 3 yield statements
	yield 3
	yield 2
	yield 1
g = mygenerator()					# Creates the generator and stores in g (=generator type)
for i in g: print(i)				# Outputs 3,2,1
print(next(g))						# Outputs 3
print(next(g))						# Outputs 2
sum(g)								# Sum-Function can also use a generator => result is 6
sorted(g)							# Sorted-Function can use generator => returns list with sorted elements [1,2,3]
----------



----------
###### EXCEPTIONS
try:
	a = 5 / 0
except Exception as e:
	print("Exception: ",e)						# Prints exception "division by zero"	

x = -5
assert (x>=0), "x is not positive"				# Checks / Assert some condition => prints "x is not positive"
if x<0: raise Exception("x should positive")	# Raises an exception => prints "Exception: x should be positive"
----------



----------
###### LAMBDA, MAP, FILTER
add10 = lambda x: x+10				# functions with one argument - add10(5) => 15
mult = lambda x,y: x*y				# functions with two arguments for multiplying - mult(2,7) => 14	
p = [(1,2),(15,1),(5,-1),(10,4)]
sorted(p)							# output is sorted with first element then second element => [(1,2),(5,-1),(10,4),(15,1)]
sorted(p,key=lambda x:x[1])			# output is sorted by the second element => [(5,-1),(15,1),(1,2),(10,4)]
sorted(p,key=lambda x:x[0]+x[1])	# output is sorted by the sum of both => [(1,2),(5,-1),(10,4),(15,1)]
a = [1,2,3,4,5]
list(map(lambda x: x*2,a))			# list is mapped with the lambda function => [2,4,6,8,10]
c=[x*2 for x in a]					# also possible with list comprehension => [2,4,6,8,10]
list(filter(lambda x: x%2==0,a))	# list is filtered with lambda for even numbers => [2,4]
c=[x for x in a if x%2==0]			# also possible with list comprehension => [2,4]
----------



----------
###### CLASS
class Human(object):          # Define a class
  species = "Homo Sapiens"    # Fix variable / class variable for all instances of the class
  def __init__(self,name):    # Constructor - automatically applied when an instance is created
      self.name = name		  # Name is assigned to the instance of the classe (self.)
	  self.tresor = []		  # Tresor is assigned as list to the instance of the class (self.)
  def say(self, msg):         # Methode of the class
      return "{name}: {message}".format(name=self.name, message=msg)
	  elf.tresor.append(msg)  # Tesor of the instance gets a new value in the list
  @classmethod                # Class methode - is used by all instances
  def get_species(cls):
      return cls.species
  @staticmethod               # Static methode - is called without class or method
  def grunt():
      return "*grunt*"    
    
    
i = Human(name="Ian")         # Create instance of the class
print(i.say("Hi"))            # Call the methode of the class (output: "Ian: Hi")
j = Human(name="Joel")        # Create additonal instance of the class
print(i.say("Hallo"))         # Call the methode of the class (output: "Joel: Hallo")
i.get_species()               # Output "Homo Sapiens"
j.get_species()               # Same output  "Homo Sapiens"
Human.species = "Was Neues"   # Change of the class variable - applies for all instances
Human.grunt()                 # Aufruf der statischen Methode => Ausgabe: "*grunt*" 
----------



----------
###### TXT FILES
with open ("fn.txt","r") as f: print(f)					# Read textfile - and print it
with open("fn.txt","r") as f:                           # Read textfile - stored in list per line
    lines = [x.strip() for x in f.readlines()]          # Whitespaces are eliminated with strip()
with open("fn.txt","w") as obj: obj.write("Ein neuer Text")   # Writing in textfile
with open("fn.txt","a") as obj: obj.write("\nNoch ein Text")  # Append text in the next line
    
while True:                  							# Try/Except - checks if file can be saved
try:                         							# otherwise outputs a error message
    writer.save ()    
    break
except Exception as e:
    print ("Error: ", e)
	traceback.print_exc()                               # Outputs the detailed error message
    input ("File Open not possible - pls close and press <Enter>")    
----------
   
   
   
----------
###### JSON format   
import json                                         # Import json-module
fn = "numbers.json"
with open(fn) as data: info = json.loads(data)      # Reading informations in json-format
json_format = json.dumps(d,indent=4)				# Convert / Encode a dict to a json-file (with indent for better reading)
json_format = json.dumps(d,sort_keys=True)			# Convert / Encode a dict to a json-file (with sorting the keys)
with open(fn,"w") as data: json.dump(person, data)  # Writing information in json-format (e.g. after updating the values/format)
person = json.loads(json_format)					# Convert / Decode a json-file to a dict
with open(fn.json,"r") as data: d=json.load(file)	# Reading information in json-format

#json-example										# Example for json-file	
{
	"firstName" : "Chuck",
	"lastName" : "Doe",
	"hobbies": ["running","swimming","singing"],
	"age": 28,
	"hasChildren": true
	"children" = [
		{
			"firstName" : "Alex"
			"age" : 5
		},
		{
			"firstName" : "Bob"
			"age" : 7
		}		
	]	
}
info["firstName"]									# Read name value => "Chuck"
for item in children:								# Iterate trough the json-file (eg. many children)
----------



----------
###### XML format
import xml.etree.ElementTree as ET					# Import xml-module
<persons>
	<person>										# Example for xml-file
		<name>Chuck</name>
		<phone type="int1"> +1 734 555"</phone>
		<email hide="yes"/>
	</person>
	...
</persons>
tree = ET.fromstring(data)							# Read xml-file into tree
tree.find("name").text								# Read name text => "Chuck"
tree.find("email".get("hide"))						# Read hide value from email => yes		
lst = persons.findall("persons/person")				# Iterate trough xml-file (eg. many persons)
for item in lst:
----------



----------
# URLLIB (handling URLs,links)
import from urllib.parse import urlparse			# Import Module for URL parsing
https://pymotw.com/2/urlparse/
import urllib.request
https://docs.python.org/3/library/urllib.request.html#module-urllib.request
u = urlparse("http://google.com/search")			# Parse HTML-link1
u.scheme											# Returns "http"
u.path												# Returns "/search"
u.netloc											# Returns "google.com"
----------



----------
###### MODULE - CSV
import csv                       
with open("test.csv","w",newline="") as fp:               # Open csv-file in writemode
    a = csv.writer (fp, delimiter=",")                    # Define csv-writer with ","-delimiter
    data = [["A", "B"],["100", "24"],["120", "33"]]       # Data for writing in nested list form
    a.writerows (data)                                    # Writing individual rows
    
### Read csv-data from a HTML-link
import urllib.request
import codecs
url = link                                                      # direct link to a csv html file
ftpstream = urllib.request.urlopen(url)
csvfile = csv.reader(codecs.iterdecode(ftpstream, 'utf-8'))     # output is nested list
----------



----------
###### MODULE - GSPREAD
# API for GoogleSheets
https://techwithtim.net/tutorials/google-sheets-python-api-tutorial/	# Tutorial explaining handling
# Create a project on https://console.cloud.google.com/
# See further setup in tutorial
import gspread                                                      # import module
from oauth2client.service_account import ServiceAccountCredentials  # import module for account credentials
from pprint import pprint                                           # import module for better output formatting
scope = ["https://spreadsheets.google.com/feeds",
         'https://www.googleapis.com/auth/spreadsheets',
         "https://www.googleapis.com/auth/drive.file",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name
    ("creds.json", scope)
client = gspread.authorize(creds)                                   # Credentials Mgmt for GoogleSheets
sheet = client.open("testpython").sheet1                            # Open the spreadhseet
data = sheet.get_all_records()                                      # Get a list of all records
len(data)                                                           # Count of all used rows in the sheet
pprint(data)                                                        # Show all data with pprint - pretty print
row = sheet.row_values(3)                                           # Get row 3 (starts counting from 1 - not 0)
col = sheet.col_values(5)                                           # Get col E (starts counting from 1 - not 0)
col = sheet.col_values(2)[3:5]                                      # Get values from col B rows 4 and 5
cell = sheet.cell(1,2).value                                        # Get the value from row 1 and col B
sheet.update_cell(2,2, "CHANGED")                                   # Update cell from row 2 and col B
sheet.insert_row(["new1","new2","new3"],2)                          # Insert new row at row number 2
sheet.append_row(["new1","new2","new3"])                            # Append new row at the end
sheet.sort((1, 'asc'), (2, 'des'), range='A2:G20')                  # Sorting the sheet (Range + col1 asc + col2 desc)
cell_list = worksheet.range('A1:G1')                                # Define cell area / cell row
new_values = [1,2,3,4,5]                                            # Define new values for area / row
for i, val in enumerate(new_values): cell_list[i].value = val       # Write new values to cell area / cell row
worksheet.update_cells(cell_list)                                   # Upate cell area / cell row    
----------



----------
###### MODULE - OPENPYXL
https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.worksheet.html#openpyxl.worksheet.worksheet.Worksheet.PAPERSIZE_A3
from openpyxl import load_workbook                      # Import module for loading a workbook
from openpyxl import Workbook							# Import module for creating a workbook
wb = load_workbook(("Test.xlsx"))                       # Load xlsx
wb = openpyxl.Workbook()								# Create new workbook
wb.create_sheet("ws")									# Create new worksheet (at the end)
wb.create_sheet("ws",0)									# Create new worksheet (at the beginning)
wb.create_sheet("ws",-2)								# Create new worksheet (at the second last position)
wb.sheetnames                                           # All worksheets from the 
ws = wb["sheet1"]                                       # Select specific worksheet in workbook
ws = wb.active                                          # Select active worksheet from workbook		
ws.title = "xyz"										# Change worksheet name
ws["A1"].value                                          # Value from specific cell
ws.cell(row=1, column=1).value                          # Value from specific cell (other method)
ws["A1"] = 97                                           # Assign value to specific cell
wb.save("Test2.xlsx")                                   # Save workbook to xlsx
for row in ws["A1":"C3"]:                               # Loop trough specific area and print the cell values
    for cell in row: print(cell.value)
for cell in ws["C"]: print(cell.value)                  # Loop trough specific column and print the cell values
ws.insert_cols(3)                         				# Insert column before col 3
ws.insert_cols(3,2)                       				# Insert 2 columns before col 3	
ws.insert_rows(7)                         				# Insert row before row 7
ws.insert_rows(10,5)                         			# Insert 5 rows before row 10
ws.delete_cols(3)										# Delete column C
ws.delete_cols(6,3)										# Delete column F to H
ws.delete_rows(5)										# Delete row 5
ws.delete_rows(5,3)										# Delete row 5 to 7
ws.move_range("D4:F10", rows=-1, cols=2)				# Move the cells from D4:F10 up one row and right two columns
ws.append([1,"A",2,"C"])								# Append the values at the bottom of the sheet
ws.dimensions											# Returns dimension of the worksheet eg. "A1:M24"
ws.max_column / ws.max_row								# Returns max column / row count of the worksheet
ws.min_column / ws.min_row								# Returns min column / row count of the worksheet (which contains data)
ws.print_title_rows(1:3)								# Rows 1:3 to be printed at the top of every page 
del wb["sheet4"]                                        # Delete worksheet in workbook
wb.close()												# Close workbook
for row in ws.iter_rows():								# Iterate trough worksheet row by row
    for cell in row: print(cell.value)	
for row in ws.iter_rows									# Iterate trough worksheet row by row (from A1 to C6 - 6 lines)
	(min_row=1,min_col=1,max_row=6,max_col=3):
for col in sheet.iter_cols():							# Iterate trough worksheet col by col
    for cell in col: print(cell.value)	
for col in ws.iter_cols									# Iterate trough worksheet col by col (from A1 to C6 - 3 lines)
	(min_row=1,min_col=1,max_row=6,max_col=3):
	
### Read whole worksheet to a nested list
data_list = []
for row in ws.iter_rows ():
    zeile = []
    for cell in row:
        if cell.value is None:
            zeile.append ("")
        else:
            zeile.append (cell.value)
    data_list.append (zeile)

### Saving a nested list in XLSX
import pandas as pd
from openpyxl import load_workbook
cont = [[row1_cell1, row1_cell2], [row2.cell1,row3_cell3]]      # Nested list for saving
book = load_workbook ("fn.xlsx")                                # load existing XLSX - skip when overwriting
writer = pd.ExcelWriter ("fn.xlsx", engine='openpyxl',          # Define writer from pandas
                         options={'strings_to_numbers': True})
pd.DataFrame (cont).to_excel (writer, sheet_name="WS1",			# Prepare Data for XLSX and worksheet1
                              header=False, index=False)
pd.DataFrame (cont).to_excel (writer, sheet_name="WS2",			# Prepare Data for XLSX and worksheet2
                              header=False, index=False) 							  
writer.save()                                                   # Save XLSX with the new worksheets
writer.close()													# Close writer

### Checking if xlsx is open while trying to save
while True:
    try:
        writer.save ()
        writer.close ()
        break
    except Exception as e:
        print ("Error: ", e)
		traceback.print_exc()
        input ("Datei kann nicht geöffnet werden - bitte schließen und <Enter> drücken!")

### Read column to a list
mylist = []
for col in ws['A']:
     mylist.append(col.value)

### Automatic adjustment of the columns accoring to best fit
column_widths = []
ws = writer.sheets[stock]
for row in content:                                    # Determination of the longest value per column
    for i, cell in enumerate (row):
        if len (column_widths) > i:
            if len (str (cell)) > column_widths[i]:
                column_widths[i] = len (str (cell))
        else:
            column_widths += [len (str (cell))]
    for i, column_width in enumerate (column_widths):  # Col 0 and 1 with fixed length - rest according to longest value in col
        if i == 0:
            ws.column_dimensions[get_column_letter (i + 1)].width = 35
        elif i == 1:
            ws.column_dimensions[get_column_letter (i + 1)].width = 32
        else:
            ws.column_dimensions[get_column_letter (i + 1)].width = column_width + 2
    
### Formating the xlsx
(when a cell is formated 2 times - it gets overwritten)
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
bold = Font (bold=True)                                                                # bold font
bg_yellow = PatternFill (fill_type="solid", start_color='fbfce1', end_color='fbfce1')  # yellow background (use color picker)
bg_grey = PatternFill (fill_type="solid", start_color='babab6', end_color='babab6')    # grey background (use color picker)
bg_green = PatternFill (fill_type="solid", start_color='8af542', end_color='8af542')   # blue background (use color picker)
frame_all = Border (left=Side (style='thin'), right=Side (style='thin'),               # define border on very side
                    top=Side (style='thin'), bottom=Side (style='thin'))
frame_upanddown = Border (top=Side (style='thin'), bottom=Side (style='thin'))         # border only on top and bottom
size14 = Font (bold=True, size="14")                                                   # font size 14
left_allign = Alignment (horizontal="left")                                            # define left alignment
right_allign = Alignment (horizontal="right")                                          # define right alignment
for row in ws["D1":"G34"]:                                         # define right alignment for area
    for cell in row: cell.alignment = right_allign  
areas = ["A7:G19","A27:G31"]                                       # define full border for several areas
for area in areas:
    for row in ws[area]:
        for cell in row: cell.border = frame_all
for i in ["A6","D6","E6","A26","D26","E26"]:                       # set background and size for several specific cells
    ws[i].fill = bg_green
    ws[i].font = size12
freeze = ws["B2"]                                                  # freeze worksheet at cell B2 for right and down scrolling 
ws.freeze_panes = freeze        
ws.sheet_properties.pageSetUpPr.fitToPage = True                   # fit xlsx to one page for printing - 1st part
ws.page_setup.fitToHeight = False                                  # fit xlsx to one page for printing - 2nd part
ws.set_printer_settings(paper_size=1, orientation = 'landscape')   # set page to landscape horizontal
ws.set_printer_settings(paper_size=1, orientation = 'portrait')   # set page to landscape horizontal
----------



----------
###### MODULE - XLWINNGS
### Update XLSX in reealtime
import xlwings as xw                                    # Import module
wb = xw.Book ("name.xlsx")                              # Read XLSX
ws = wb.sheets["name_sheet"]                            # Read specific worksheet
ws["A1"].value = "xyz"                                  # Updates specific cell
for i in ws.range("A3:A7"): i.value = ""				# Iterate trough cells an set them to "" / None
l = ws.range("A2:A100").value                           # Read specific cells to list
cells = ws.range("A2:A100")								# Read cells
cells[1].value = "new value"                            # Update the value of a cell
ws.range("A2:A100").value = l                           # Writeback the updates to cells
xl_col_sort(ws,1)                                       # Sort worksheet in the first col (function see below)

### Sorting workssheet in given col
def xl_col_sort(sheet,col_num):                         
    sheet.range((2,col_num)).api.SortKey1=sheet.range((2,col_num)).api, Order1=1)
    return
----------



----------
###### MODULE - WIN32COM
# Create Worksheets as PDF from XLSX
import win32com.client                                  # Import Module
import os
inp = os.getcwd() + "\\" +"excel.xlsx"                  # Define Input-XLSX
out = os.getcwd() + "\\" +"ws.pdf"                      # Define Output-PDF
o = win32com.client.Dispatch("Excel.Application")       # Initialize Excel Application
o.Visible = False                                       # Do everything hidden
wb = o.Workbooks.Open(inp)                              # Open XLSX
wb.ActiveSheet.ExportAsFixedFormat (0, out)             # Create PDF from the active worksheet in the xlsx
wb.Close(True)                                          # Close XLSX
# Optional / Additonal
wb.Sheets.Count                                         # Number of Worksheets
wb.WorkSheets ([3,4,8]).Select()                        # Select 3 different worksheets by number (for exporting afterwards)
ws = wb.Worksheets[4]                                   # Assign worksheet 4
ws.PageSetup.Zoom = False                               # No Zooming
ws.PageSetup.FitToPagesTall = 1                         # Fit to 1 height
ws.PageSetup.FitToPagesWide = 1                         # Fit to 1 width
ws.PageSetup.PrintArea = "A1:G50"                       # Select specific print area
----------



----------
###### MODULE - PyPDF2
(Working with PDFs)
# Read PDF informations / metadata
from PyPDF2 import PdfFileReader 						# Import Module for PDF Reading
with open (fn, 'rb') as f:
    pdf = PdfFileReader (f)								# Read PDF informations
    info = pdf.getDocumentInfo ()						# Read PDF infos^
    number_of_pages = pdf.getNumPages ()				# Read number of pages
	print(info)											# Outputs all informations
	print(info.title)									# Outputs title of the pdf
	print(info.author)									# Outputs author of the pdf

# Read Text from Pdf			
page = pdf.getPage (7)									# Select page 8						
text = page.extractText ()								# Extract text	
print (text)											# print (text	

# Split PDFs
from PyPDF2 import PdfFileWriter						# Import Module for PDF Writing
pdf_writer = PdfFileWriter()							# Create new instance of PDF writer
pdf_writer.addPage(page)                                # Add Page to writer
with open(output_filename, 'wb') as out:				# Write splitted PDF
	pdf_writer.write(out)

# Merge PDFs
from PyPDF2 import PdfFileMerger						# Import Module for PDF Merging
pdf_merger = PdfFileMerger()							# Create new instance of PDF merger
pdf_merger.append(path)                                 # Append Page for merging
with open(output_path, 'wb') as fileobj:				# Write merged PDF
	pdf_merger.write(fileobj)

page.rotateClockwise(90)								# Rotate clockwise
page.rotateCounterClockwise(90)							# Rotate counter clockwise
page.mergePage(watermark_page)							# Overlaying / Watermarking two pages
----------



----------
###### MYSQL / MARIADB / SQL
import mysql.connector                                     # Import module for mysql access
mydb = mysql.connector.connect                             # Define connection
    (host="localhost",user="root",passwd="pwd")
mycursor = mydb.cursor()                                   # Set Cursor on mySQL
mycursor.execute("CREATE DATABASE db")                     # Creates database "db"
mycursor.execute("SHOW DATABASES")                         # Show databases and informations
    for db in mycursor: print(db)
mycursor.execute("CREATE TABLE students                    # Create new table with 2 cols
                (name VARCHAR(255),age INTEGER(10))")
mycursor.execute("SHOW TABLES")                            # Show tables and informations
    for tb in mycursor: print(tb)
sqlFormula = "INSERT INTO students                         # Insert row in table with the 2 values using sql injection
                (name, age) VALUES (%s, %s)"
student1 = ("Rachel", 22)                                  # Define a row with values to insert
mycursor.execute(sqlFormula,student1)                      # Execute the sql statement to add one row
mydb.commit()                                              # Commit the change (otherwise no update will be saved to db)
students = [("Tom", 22),("Mark", 29),("Clara", 52)]        # Define more rows with values
mycursor.executemany(sqlFormula,students)                  # Execute the sql statement to add more row (from list / tuple)   
mycursor.execute("SELECT age FROM students")               # Select col "age" from table "students"
myresult = mycursor.fetchall()                             # Read all rows according the above select statement
myresult = mycursor.fetchone()                             # Read one / first row according the above select statement
for row in myresult: print(row)                            # Output the read row / table informations
sql = "SELECT * FROM students WHERE age > 25"              # Define select (greater than)
sql = "SELECT * FROM students WHERE name LIKE 'M%'"        # Define select (with like clausel)
mycursor.execute(sql)                                      # Execute SQL
sql = "SELECT * FROM students WHERE name = %s"             # Define select (with sql injection)
mycursor.execute(sql, ("Mike", ))                          # Execute SQL with parameters
sql = "UPDATE students SET age = 82 WHERE name='xyz'"      # Update row where name = "xyz"
sql = "SELECT * FROM students LIMIT 5"                     # Limit the output to 5 rows
sql = "SELECT * FROM students LIMIT 5 OFFSET 2             # Limit the output toi 5 rows and starting with element 2
sql = "SELECT * FROM students ORDER BY name"               # Output content - ascending order
sql = "SELECT * FROM students ORDER BY name DESC"          # Output content - descending order
sql = "DELETE FROM students WHERE name = 'xyz'"            # Delete row with name "xyz"
sql = "DROP TABLE IF EXISTS students"                      # Drop whole table (if exists helps if there no table anymore)  

###Read ticker for specific ticker                 
sql = "SELECT ticker FROM stock_main where ticker=%s"      # Or Select * to get all values from the table
cont = [(summary["symbol"])]
c.execute(sql,cont)
data = c.fetchall()                 
----------



----------
###### MYSQL / MARIADB / SQL ALCHEMY ######
from sqlalchemy import create_engine                       # Import MODULE
engine = create_engine("mysql+pymysql:                     # Define access to the MySQL-DB (username, pw, dbname)
//user:pw@localhost/dbname?host=localhost?port=3306")
conn = engine.connect()                                    # Establish connection
engine.table_names()                                       # Read all existing tables from the databasen - returns list
conn.execute("SELECT * FROM actor").fetchall()             # Read data from db - returns list with tupels as rows

### Tabelle anlegen in MySQL DB
from sqlalchemy import Table, Column, Integer, String, Float, MetaData
meta = MetaData()                                          # Tabelle anlegen in MySQL DB
students = Table(
   'students', meta,
   Column('id', Integer, primary_key = True),
   Column('name', String(45)),
   Column('lastname', String(45)),
)
meta.create_all(engine)

### Create INSERT / UPDATE / DELETE / SELECT statements
students.insert()                                           # Creates INSERT Statement according due the whole students structure
	=> shows: INSERT INTO students (id, name, lastname, floatvar) VALUES (:id, :name, :lastname, :floatvar)
students.insert().values(name = 'Karan')                    # Creates INSERT Statement for specific attribute
	=> shows: INSERT INTO students (name) VALUES (:name)
students.update()                                           # Creates UPDATE Statement
	=> shows: UPDATE students SET id=:id, name=:name, lastname=:lastname, floatvar=:floatvar
students.delete()                                           # Creates DELETE Statement 
	=> shows: DELETE FROM students
students.select()                                           # Creates SELECT Statement
	=> shows: SELECT students.id, students.name, students.lastname, students.floatvar  FROM students

### Execute SQL command - INSERT                             # Insert rows in table
conn = engine.connect()                                     # Insert one row
ins = students.insert().values name = 'Brauneder', lastname = 'Karl')
result = conn.execute(ins)
result.inserted_primary_key                                 # Shows the inserted primary key
conn.execute(students.insert(), [                           # Insert more rows
   {'name':'Krankl', 'lastname' : 'Hans'},
   {'name':'Herzog','lastname' : 'Andreas'},
])

### Execute SQL command - SELECT                             # Select rows from table
s = students.select()                                       # Creates select statement for SELECT *
result = conn.execute(s)                                    # Excenute select statement
for row in result: print(row)                               # Outputs the result rows for select
s = students.select().where(students.c.id > 10)             # Creates select statement with WHERE clausel

### Execute SQL with Textual SQL                             # Select Statement with textual SQL
from sqlalchemy.sql import text
t = text("SELECT name FROM students")
result = conn.execute(t)
for row in result: print(row)
t = text("select students.name, students.lastname from students where students.name between :x and :y")
result = conn.execute(t, x = 'A', y = 'L')                  # Select statement with where-parameters

### Using Aliases
from sqlalchemy.sql import alias, select
st = students.alias("a")
s = select([st]).where(st.c.id > 2)
conn.execute(s).fetchall()

### Execute UPDATE statement
conn = engine.connect()
stmt=students.update().where(students.c.lastname=='Khanna').values(lastname='Kapoor')
conn.execute(stmt)
s = students.select()
conn.execute(s).fetchall()

### Execute DELETE statementconn = engine.connect()
stmt = students.delete().where(students.c.lastname == 'Khanna')
conn.execute(stmt)
s = students.select()
conn.execute(s).fetchall()
----------



----------
###### SQLITE3 SQL ######
conn = sqlite3.connect("address_book.db")		# Create a database or connect to one
c = conn.cursor()								# Create a cursor (for working with the db)
c.execute("""CREATE TABLE tbl (					# Create a table in the database
		attr1 text,
		attr2 text,
		attr3 integer)""")
c.execute(INSERT INTO tbl VALUES (:attr1,:attr2,:attr3)",
		{										# Insert rows into database	
			"attr1": field1.get(),
			"attr2": field2.get(),
			"attr3": field3.get()
		})
c.execute"SELECT * FROM adresses")				# Select rows from database
c.execute("DELETE from addresses WHERE			# Delte row from database - get key from delete_box widget (eg. tkinter-module)
		oid = " + delete_box.get())
records = c.fetchall()							# Fetch all rows
records = c.fetchone()							# Fetch only one row
records = c.fetchmany(50)						# Fetch the first 50 rows
conn.commit()									# Commit Changes
conn.close()									# Close Connection
----------




----------
###### MODULES - DATES, DATETIME, CALENDAR, TIMEIT, TIME, SYS, CTYPES
# Standardmodules from python no pip install necessary
https://www.programiz.com/python-programming/datetime/strptime      # Overview % parsing commands
from datetime import datetime, timedelta                     # Import module datetime and timedelta
from datetime import date                                    # Import module dat
datetime.strptime(s, "%Y-%m-%d")                             # Conversion string to datetime in format dd.mm.jjjj
datetime.strftime(dt, "%Y-%m-%d")                            # Conversion datetime to string in format  dd.mm.jjjj
datetime.strftime((datetime.strptime(cont_tmp,"%m/%d/%Y")),"%Y-%m-%d")      # Convert dateformat from string in one line (1st from - 2nd to)
isinstance(x, datetime.date)								 # Check if variable is of type datetime.date                   
date = date(2020,7,24)                                       # Define date as "2020-07-24"
dt = datetime(2020,3,5,19,27,23)                      		 # Define date+time as "2020-03-05 19:27:23"
now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")           # Actual date+time in format 2020-06-09 20:11:13
now = datetime.now().strftime("%Y-%m-%d") 			         # Actual date in format 2020-06-09
tday = datetime.today()                                      # Actual date in datetime format
tday = datetime.today().date()								 # Actual date as date format
dt.year, dt.month, dt.day                              		 # Year / month / day from the datetime
tday.isoweekday()                                            # Returns weekday (monday=1, sunday=7)
last_friday = day - timedelta(days=tday.isoweekday() + 2)    # Calculates last friday (+2 for FR, +1 SA, 0 SU, -1 MO, -2 TU, -3 WE, -4 TH)
tdelta = timedelta(days=7)                                   # Creates timedelta for 7 days
tday + tdelta                                                # 7 days are added to the actual day
newdate = date - timedelta(days=1)                           # Previous 1-day-back-date for date
date2-date1                                                  # Timedelta for two dates
daysDiff = (date2-date1).daysDiff                            # Difference in days
minDiff = (date2-date1).total_seconds() / 60                 # Difference in minutes
datetime.fromisoformat('2020-07-10 02:00:00').timestamp()    # Generate ISO-format from datetime
iso_dt = datetime.fromisoformat(str(datetime.now())).timestamp()   # Generate ISO-format from actual date
date = datetime.fromtimestamp(1594339200000 / 1e3)           # Generate Datetime from ISO-format#
sys.getsizeof(l) or sys.getsizeof(t)						 # Shows size of the list / tuple in bytes

### Check last day of month & first weekday of month
import calendar
calendar.monthrange(year,month)                         # return tuple - 1st: weekday first day - 2nd: ultimo day

### Timing a specific activity
import timeit
start = timeit.default_timer()                          # Start timer
stop = timeit.default_timer()                           # Stop timer
round(stop-start/60,2)                                  # Stopped time in minutes and rounde for 2 decimals
timeit.timeit(stmt="[0,1,2]",number=1000000)     		# Checking the time for creating the list for 1mio times

### Countdown while waiting
import time, import sys                                    
time.sleep(3)                                           # Delay for 3 seconds
for i in range (30, 0, -1):                             # Delay for 30 seconds - countdown in one row
    sys.stdout.write (str (i) + ' ')                    # Countdown output
    sys.stdout.flush ()
    time.sleep (1)

### Check which os system running    
from sys import platform
if platform == "linux"                                  # Program is excecuting from Linux
if platform == "win32":                                 # Program ix excecuting from Windows
if platform == "darwin":                                # Program is excecuting from Mac
    
### Read monitor resolution
import ctypes
user32 = ctypes.windll.user32
screensize = user32.GetSystemMetrics(0),                # 1st parameter is width, 2nd parameter is height
    user32.GetSystemMetrics(1)
----------



----------
###### MODULE - Currencyconverter
from currency_converter import CurrencyConverter		# Import Module
from datetime import date								# Import Module for rate-checks for specific date
c = CurrencyConverter()
c.convert(100, 'USD', 'AUD')							# Convert 100 USD to AUD with for actual date
c.convert(100, 'USD', 'AUD', date=date(2013, 3, 21))	# Convert 100 USD to AUD for date 2013-03-21
first_date, last_date = c.bounds['BGN']					# Check begin and end-date for all rates for BGN
c.currencies											# Read all possible currencies in a set	
----------



----------
###### MODULE - Countries, Currency, Language
https://pypi.org/project/pycountry/				# Description about the module
# Problems with some added python modules (eg. pycountry) with pyinstaller => see pyinstaller description
import pycountry								# Install moduel
list(pycountry.countries)                       # List of all countries with several informations
c = pycountry.countries.get(alpha_2='DE')       # Searching for country-informatns for "DE"
c.alpha_2                                       # Outputs => DE
c.alpha_3										# Outputs => DEU
c.numeric                                       # Outputs number of the coutnry => 276
c.name                                          # Outputs full name of the country => Germany	
c.official_name                                 # Outputs the official name => "Federal Republic of Germany!
list(pycountry.currencies)						# List of all currencies
list(pycountry.languages)						# List of all languages                            
list(pycountry.historic_countries)              # List of all historic countries which not more exists
list(pycountry.subdivisiones)                   # List of all subdivided countries
----------



----------
####### MODULES - SMTPLIB, MIMEText
# sending emails
# if you have 2-Factor-Authentification you must generate a App-Password for GMail
import smtplib
from email.mime.text import MIMEText
s = smtplib.SMTP('smtp.gmail.com', 587)                      # SMTP-Server and port number from the mail provider (e.g. GMail)
print(s.ehlo())                                              # Response 250 means connection is ok
print(s.starttls())                                
print(s.login('sender@gmail.com', 'xyz123'))                 # Not the real pw - only the app-generated pw from gmail
msg = MIMEText("This is the text of the mail")               # Message of the email
sender = ['sender@gmail.com']                                # One recipient
recipients = ['recip1@gmail.com']                            # One or more recipient
recipients = ['recip1@gmail.com','recip2@r-software.at']     # Or more recipients 
msg['Subject'] = "Subject of Mail"                           # Subject
msg['From'] = sender                                         # From
msg['To'] = ", ".join(recipients)                            # One or more recipients
s.sendmail(sender, recipients, msg.as_string())              # Sending email
s.quit()                                                     # Closing connection
----------



----------
###### MODULE - PATHLIB
# interacting with the operating system
from pathlib import Path									# Import module
Path.cwd()													# Current working directory
Path("folder").mkdir(parents=True, exist_ok=True)			# Creates new folder (no error message if folder allready exists with exist_ok=True)


----------



----------
###### MODULE - OS
# interacting with the operating system
import os												    # Import module
print(dir(os))                                              # Shows alls attributs and methods of the library
os.chdir("C:/temp")                                         # Change the directory
os.getcwd()                                                 # Current working directory
for f in os.listdir(): print(f)                             # Outputs the entire content of the current working dir
for f in os.listdir(): fn, ext = os.path.splitext(f)        # Outputs the elements seperated in name + extension
os.rename(filename, new_name)                               # Change the filenmae
os.rename(path1+fn, path2+fn)							    # Cut and paste file from path1 to path2
os.system("copy source.txt destination.txt")			    # Copy file from source to destination
os.mkdir("folder")                                          # Creates new folder (also possible with makedirs => is prefered)
os.makedirs("folder/subfolder")                             # Creates new folder and subfolders
os.remove (file)											# Delete file
os.rmdir ("folder")                                        	# Delete folder (prefered cause deleting ist dangerous)
os.removedirs ("folder/subfolder")                          # Delete folder and subfolders
os.stat("file")                                             # Outputs the statistics of the file (size, modification time,...)
for dirpath,dir,fileos in os.walk()                         # Outputs dirpath - all the dirs - and all the files
os.environ.get("HOME")                                      # Get home dir of the actual user
os.path.basename("temp/file.txt")                           # Outputs only the filename => file.txt
os.path.dirname("temp/file.txt")                            # Outputs only the dir => temp/  
os.path.split("temp/file.txt")                              # Outputs filename and dir as a tupel => ("temp/","file.txt")
os.path.exists("temp/file.txt")                             # Checks if filename exists in the filesystem
os.path.isdir("xyz")                                        # Checks if folder exists
os.path.isfile("xyz")                                       # Checks if element is a file
os.listdir()											    # Put all filenames to a list from the actual working dir
----------



----------
###### MODULE - LOGGING
# general Logging Layers: debug => info => warning => error => critical
import logging                                               # importing module 
logging.basicConfig(filename="fn.log",format='%(asctime)s    # Create & Config - w overwrites every time
                    %(message)s', filemode='w')                                       
logging.basicConfig(filename="fn.log",level=logging.INFO)    # Level every log > INFO possible (but not DEBUG)
...format="%(name)"s-%(levelname)s:%(asctime)s-%(message)s   # getLogger-Name / Level / Time / Message
logger=logging.getLogger(logname)                            # Creating an object with specific name
logger.setLevel(logging.DEBUG)                               # Setting the threshold of logger to DEBUG 
logger.debug("Harmless debug Message")                       # Debug message
logger.info("Just an information")                           # Info message
logger.warning("Its a Warning")                              # Warning message
logger.error("Did you try to divide by zero")                # Error message
logger.critical("Internet is down")                          # Critical error message

###Example with 2 logging levels
logger=logging.getLogger(__name__)							 # Creating an object with the name of the py-file	
stream_h = logging.StreamHandler()							 # Defining a handler for streamdata in the console
file_h = logging FileHandler("file.log"						 # Defining a handler for logging to a file
stream_h.setLevel(logging.WARNING)							 # Set Stream-Logging to Warning-Level
file_h.setLevel(logging.ERROR)								 # Set File-Logging to Error-Level
	=> Error-Messages will go to both stream and file - Warning-Messages only to stream and not to file
formatter = logging.formatter								 # Defining the format for outputting
	"%(name)s - %(levelname)s - %(message)s")
stream_h.setFormatter(formatter)							 # Setting format for stream-logging
file_h.setFormatter(formatter)								 # Setting format for file-logging
logger.addHandler(stream_h)									 # Adding Stream-handler to logger
logger.addHandler(file_h)									 # Adding File-handler to logger                   

### logging using RotatingFileHandler
https://stackoverflow.com/questions/24505145/how-to-limit-log-file-size-in-python	# Explanation about handling
from logging.handlers import RotatingFileHandler             # importing file handler
log_formatter = logging.Formatter('%(asctime)s               # Define format for output in logfile
    %(levelname)s %(funcName)s(%(lineno)d) %(message)s')                    
my_handler = RotatingFileHandler(logFile, mode='a',          # Define handler with maxBytes and backupCount
    maxBytes=5*1024*1024, backupCount=2, encoding=None,      # When the log grows more then maxBytes...
    delay=0)                                                 # ...itgenerates a new logfile-version
my_handler.setFormatter(log_formatter)                       # Setting the format
my_handler.setLevel(logging.INFO)                            # Setting the threshold of logger to INFO
logger = logging.getLogger('root')                           # Creating an object with name
logger.setLevel(logging.INFO)                                # Setting the threshold of logger to INFO
logger.addHandler(my_handler)                                # Define handler with definition above
----------



----------
###### MODULE - UNITTEST
import unittest                                              # Importing module
from prg import func                                         # Import the function which will be tested
class TestFunc(unittest.TestCase):                           # Define the class for testing the function
    def testcase1(self):                                     # Define the first testcase - must begin with test*
        erg = func("x",3)                                    # call the function
        self.assertEqual("3x")                               # check if result is ok
if __name__ == '__main__': unittest.main()                   # starting the unittest
### many methods: https://docs.python.org/3/library/unittest.html
self.assertEqual(a,b)                                        # Check if equal
self.assertNotEquale(a,b)                                    # Check if not equal
self.assertTrue(x)                                           # Check if true
self.assertFalse(x)                                          # Check if false
self.assertIn(i,list)                                        # Check if i in list
self.assertNotIn(i,list)                                     # Check if i not in list
----------



----------
###### MOUDLE - ITERTOOLS
# product, permutations, combinations, accumulate, groupby, infinite iterators
from itertools import product, permutations, combinations, combinations_with_replacement, accumulate, groupby
from itertools import count, cycle, repeat
import operator 							# necessary for the func-operator
product([1,2],[3,4])						# all combis for carthesian product => [(1,3),(1,4),(2,3),(2,4)]
product([0, 1], repeat=3)               	# all with 3 elements => (0,0,0),(0,0,1),(0,1,0),(0,1,1), aso.
product('ab', '12')                     	# all combis of this 2 strings => [("a","1"),("a","2"),("b","1"),("b","2")]
permutations ([1,2,3])						# all different orderings => [(1,2,3),(1,3,2),(2,1,3),(2,3,1),(3,1,2),(3,2,1)]
permutations([1,2,3],2)						# all different orderings with 2 elements => [(1,2),(1,3),(2,1),(2,3),(3,1),(3,2)]
combinations([1,2,3,4],2)					# all possible combis for a defined length => [(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)]
combinations_with_replacement([1,2,3],2)	# all combis also with itself => [(1,1),(1,2),(1,3),(2,2),(2,3),(3,3)]
accumulate([1,2,3,4])						# accumulates every number with the next => [1,3,6,10]
accumulate([1,2,3,4], func=operator.mul) 	# using operator .mul for multiplication every number the next => [1,2,6,24]
accumulate([1,2,5,3,4], func=max)			# compares every entry to the maximum => [1,2,5,5,5]	
groupby([1,2,3],key=func_smaller3)          # gives interabel - groups by the func => True[1,2], False[3]
grougpy([1,2,3],key=lambda x: x<3)			# same thing - with a lambda operation => True[1,2], False[3] 
for i in count(10)							# infinite loop starting at 10 (has to be ended with break sometimes)
for i in cycle([1,2,3])						# infinite cycle through the list (has to be ended with break sometimes)
for i in repeat(1)							# infinite loop with 1
for i in repeat(1,4)						# loop with 1 for 4 times
----------



----------
###### NUMPY
# memory efficient, working in the background used by other modules
# using only the bits which are necessary for each column (1 is stored in python with 24bytes - in numpy with 1byte or lesser)
# shape of array has to be consistent - otherwise it just fall back to regular python objects eg. [[12,11],[13]]
import numpy as np						# Import numpy module with np abbreviation
# Using arrays, types and slicing
a = np.array([1,2,3,4])					# Define a numpy array (automatically with type int)
a[[0,2,-1]]								# Multiindexing in arrays possible => gives array/[0.,1.,2.])
np.array([1,2,3,4]),dtype=np.float)		# Defines a numpy array with datatype float (and not int)
a = np.array([[1,2,3],[4,5,6],[7,8,9])	# Defines a 2d numpy array
a.shape									# Returns dimension shape => (3,3)
a.ndim									# Returns number of dimensions => 2
a.size									# Returns total number of elements => 9
a[1]									# Gives / slices the second row => [4,5,6]
a[1,0]									# Gives / slices the second row and first element => 4
a[0:2]									# Slices the first 2 rows => array([[1,2,3],[4,5,6]])
a[:,:2]									# Slices all row with first 2 elements => array([[1,2],[4,5],[7,8]])
a[:2,:2]								# Slices first 2 rows and first 2 elements => array([[1,2],[4,5]])
a[:2,2:]								# Slices first 2 rows and last element => array([[3],[6]])
a[1] = np.array([9,9,9])				# Changes content of second row => array([[1,2,3],[9,9,9],[7,8,9])
a[2] = 8								# Changes content of third row (for all elements) => array([[1,2,3],[4,5,6],[8,8,8])
a.sum()									# Builds the sum of all elements => 45
a.mean()								# => 5.0
a.std()									# Return standard deviation => 2.58198889774344
a.sum(axis=0)							# Builds sum per columns => array([12,15,18])	
a.sum(axis=1)							# Builds sum per rows => array([6,15,24])	
np.zeroes(5)							# Initialize numpy array with 5 zeros => array([0.,0.,0.,0.,0.])
np.ones((2,3),dtype="int32")			# Initialize numpy array with 2x3 ones with int32 => array([[0,0,0],[0,0,0]])
np.full((2,2,),99)						# Initialize np array with 2x2 with the value 99 => array([[99,99],[99,99]])
np.identity(3)							# Initialize a square matrix with len 3 => array([[1.,0.,0.],[0.,1.,0.],[0.,0.,1.]])
arr_b = arr_a.copy()					# Separate individual copy of the numpy array (no updates in both arrays)
c = np.array([[1,2,3,4],[5,6,7,8]])		# Define 2d numpy array with 2,4 dimension
c.reshape((4,2))						# Reshape the numpy array to 4,2 dimension => [[1,2],[3,4],[5,6],[7,8]]
c.reshape((2,2,2))						# Reshape the numpy array to 3d with 2,2,2 dimension => [[[1,2],[3,4]],[5,6],[7,8]]]

# Vector handling
a = np.array(4)							# Build array with this range => array([0,1,2,3])	
a + 10									# Changes +10 to each element => array([10,11,12,13]) (creates new array - no changing a)
a * 10									# Changes *10 to each element => array([0,10,20,30]) (creates new array - no changing a)
a += 100								# Changes the existing array a => array([100,101,102,103])
b = np.array([10,10,10,10])				# Defines second array babab6
a + b									# Sums the 2 arrays to new array => array([10,11,12,13)
a * b									# Multiplicates the 2 arrays to new array => array([0,10,20,30)
np.sin(b)								# Make sinus of all entries
np.cos(b)								# Make cosinus of all entries

# Boolean Array Operations
a = np.array(4)							# Build array with this range => array([0,1,2,3])	
a[True,False,False,True]				# Selecting items with boolean expressions - returns first and last element => array([0,3])
a >= 2									# Use operation on the array => array([False,False,True,True])
a[a >= 2]								# Using operation for slicing => array([2,3])
a[a > a.mean()]				 			# Gives back all elements which are greater than the mean => array([2,3])
a[~(a > a.mean())]						# Gives back all elements which are NOT greater than the mean => array([0,1])
a[(a==0) | (a==1)]						# Gives back all elements which are equal to 0 OR 1 => array([0,1])
a[(a <= 2) & (a % 2 == 0)]				# Gives back all elements which are <=2 and have no rest divided by 2 => array([0,2])

# Creating random arrays
np.random.rand(3)						# Random 1d float array with 3 entries => eg. (0.8377, 0.8720, 0,7784)
np.random.rand(3,3)						# Random 2d array 3 entries => [[0.27,0.91,0.54],[0.68,0.87,0.36],[0.05,0.64,0.16]]
np.random.randint(0,10,3)				# Random 1d int array 3 entries => [0,8,8]
np.random.randint(0,10,(3,4))			# Random 2d int array 3x4 entries => [[2,6,4,5],[7,6,7,3],[7,0,4,0]]
np.random.randint(100, size(3,3))		# Random 2d int array 3x3 entries with values from 0 to 99	
np.random.randint(-4,8,size(3,3))		# Random 2d int array 3x3 entries with values from -4 to 7
np.random.shuffle(lst)					# Shuffeling a 2d list but only the first axes
np.random.seed(1)						# Can reproduce the same results 

----------



----------
###### MODULE - PANDAS
https://gist.github.com/why-not/4582705                     # examples
import pandas as pd                                         # Import Module
import numpy as np											# Also importing numpy-module necessary
pd.set_option('display.max_columns',11)						# Show more information - count of the shown columns
pd.set_option('display.width', None)						# Show more information - None is using the maximum width of the IDE

# SERIES
s = pd.Series([35,63,81,61,127,65,319])						# Define a series
print(s)													# Shows default-index in 1 row / values in 2 row - also the dtype: int64 at the bottom
s.name = "G7 population in millions"						# Name the series (shows the name also when series i printed at the bottom
s.dtype														# Shows the dtype of the series => dtype("int64")
s.values													# Values of the series => array([35,63,81,61,127,65,319])
s[0]														# Slicing element => 35
s.index														# Shows the index of the series => RangeIndex(start=0, stop=7, step=1)
s.index[0]													# Shows first index-value
s.index=["CAN","FRA","GER","ITA","JPN","UK","USA]			# Change the index of the series from default 0-6 to country-names
s["GER"]													# Accessing now with the new index possible => 81
s.iloc[0]													# Access with index still possible using iloc => 35
s.iloc[-1]													# Access with index still possible using iloc => 319
s.["GER","JPN"]												# Multiple selecting possible => GER 81 and JPN 127
s.iloc[0,-1]												# Multiple selecting with index using iloc possible => CAN 35 and USA 319
s.["CAN":"GER"]												# Multiple selecting with ":" - upper element is included => CAN 35, FRA 63, GER 81
s + 10														# Add 10 for the every element in the series => ([45,73,91,71,137,75,329])
s[s > 70]													# Using boolean operation to output every element => GER 81, JPN 127, USA 319
s[s > s.mean()]												# Using boolean operation to output countries > mean => JPN 127, USA 319
logical operator which can be used							# ~ for not, | for or, & for and
s["CAN"] = 40												# Changing the value of a series element => CAN 40
s.iloc[-1] = 500											# Changing the value of the last element => USA 500
s[s < 70] = 99												# Changing the value with a specific operation => CAN,FRA,ITA,UK are changed to 99
s = pd.Series([1,np.nan,7]									# Define a series with NaN values
d.isnull()													# Check for NaN values in the series => False,True,False
s.notnull()													# Check for NOT NaN values in the series => True,False,True
s.notnull().sum()											# Sum of not NaN values in the series => 2
s.isnull().sum()											# Sum of NaN values in the series => 1
s.[s.notnull()]												# Outputs all entries which are not NaN	
s.dropna()													# Delete all entries with NaN
s.fillna(0)													# Replace the NaN-values with 0
s.fillna(s.mean())											# Replace the NaN-values with the meanvalue of the serie
s.fillna(method="ffill")									# With forward-fill the NaN-values are replaced with the value before (if the first i gets NaN)	
s.fillna(method="bfill")									# With backward-fill the NaN-values are replaced with the value after (if the last i gets NaN)
s.duplicated()												# Returns the duplicates (only the first entry for the same is no duplicate - rest gets True)
s.duplicated(keep="last")									# Returns the duplicates (only the last entry for the same value is no duplicate - rest gets True)
s.duplicated(keep=False)									# Returns the duplicates (when there are more than one value - all get flagged as duplicate with True)
s.drop_duplicates()											# Duplicates get dropped (only the first entry remains)
s.drop_duplicates(keep="last")					 			# Duplicates get dropped (only the last entry remains)
s.drop_duplicates(keep=False)								# Duplicates get dropped (no entry remains if there are duplicate entries for the value)
s.sort_values() 		                        	        # Sorting by value ascending
s.sort_values(ascending=False)      			            # Sorting by value descending

# DATAFRAMES 
# are immutable, column is a series, dataframe = combination of multiple series
# reading data
# possible reader: read_csv,read_excel,read_json,read_html,read_sql
# possible writer: to_csv,to_excel,to_json,to_html,to_sql
# CSV
pf.read_csv?												# Shows all parameters for the reader
df = pd.read_csv("fn.csv")              	                # Read csv into dataframe - first line will be col-names of the dataframe
df = pd.read_csv("fn.csv",header=None)	                    # Read csv into dataframe - no headerline (col names will be default numeric)
df = pd.read_csv("fn.csv",sep="#")							# Read csv with sepeartor "#" instead of the default ";"
df = pd.read_csv("fn.csv",									# Many operations can be directly done when reading the csv-file
	header=None												# => no header in the csv available
	names=["Timestamp","Price"],							# => name the columns
	index_col=0,							 	 	 	 	# => define which column will be the index
	parse_dates=True,										# => read dates as date - and not as string
	na_values["?","-",""],									# => treat this chars as NaN-values
	dtype={"Price":"float"},								# => assign specific datatype to the column "Price"
	decimal=",",											# => decimal-point is "," (and not ".")
	skip_blank_lines=False),								# => read also blank lines (as default they are ignored)
	usecols=[0,1,2],										# => use only the three columns when reading the csv (by position)
	usecols=["first","last","age"])							# => use only the three columns when reading the csv (selected by name)
df.to_csv("fn2.csv")										# Write dataframe to csv
# XLSX
df = pd.read_excel("file.xlsx")                             # Read xlsx (first worksheet) into dataframe
df = pd.read_excel("file.xlsx",header=None)                 # Read xlsx (first worksheet) into dataframe - without headers
df = pd.read_excel("file.xlsx",index_col=[0])				# Read xlsx and define the first column as index of the dataframe
df = pd.read_excel("file.xlsx",sheet_name="Prod")			# Read xlsx (worksheet "Prod") into dataframe
ef = pd.ExcelFile("file.xlsx")								# Read xlsx with the ExcelFile method
ef.sheet_names												# Shows alle worksheet-names as a list => eg. ["Prod","Desc"]
df = ef.parse("Prod")										# Read/Parse the worksheet "Prod" in a dataframe
df.to_excel("file2.xlsx",									# Write dataframe to xlsx
	sheet_name="Prod",										# Write to worksheet "Prod"
	startrow=1,												# Start writing at row 1
	startcol=2)												# Start writing at col 2
w = pd.ExcelWriter("file2.xlsx")							# Write dataframe to xlsx with the ExcelWriter method
with w: df.to_excel(w,sheet_name="Prod"						# Write dataframe to xlsx worksheet "Prod" with the ExcelWriter method 
with pd.ExcelWriter("file2.xlsx") as writer:				# Write multiple worksheet to xlsx from dataframes
	df1.to_excel(w, sheet_name="Prod")						# Dataframe1 stored in worksheet "Prod"
	df2.to_excel(w, sheet_name="Desc")						# Dataframe2 stored in worksheet "Desc"
# SQL
conn = sqlite3.connect("data.db")							# Establish connection to the sql-db
df = pd.read_sql("SELECT * FROM empl;",conn)				# Read data from sql-db into dataframe
df = pd.read_sql("SELECT * FROM empl;",conn,				# Many operations can be directly done when reading the sql-db
	index_col="EmplID",										# => define which column will be the index				
	parse_dates["BirthDate","HireDate"])					# => read this columns as date
from sqlalchemy import create_engine						# It is easier to read a complete table using sqlalechmy
engine = create_engine("data.db")							# Create SQL Alchemy engine
connection = engine.connect()								# Establish connection with SQL Alchemy
df = pd.read_sql_table("empl",con=connection)				# Read whole table with SQL-Alechmy (many things are auto-done - e.g. Indexing,Parsing)
df.to_sql("data.db",conn)									# Writes dataframe to the sql-db (breaks when table allready exists)
df.to_sql("data.db",conn,if_exists="replace")				# Writes dataframe to the sql-db (with droping the table before inserting)
df.to_sql("data.db",conn,if_exists="append")				# Writes dataframe to the sql-db (with inserting new values to existing table)
# HTML
df = pd.read_html(html_string)								# Read html into dataframe
html_url"https://www.xyz.com"								# Assign html-varialbe
df = pd.read_html(html_url)									# Read html-link to dataframe	

# EXAMPLE
#https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-course/pandas-condtitional-selection-and-modifying-dataframes
		Popl	HDI		Continent
	CAN	35		0,913	America
	FRA	64		0,888	Europe
	GER	81		0,916	Europe	
	ITA 61		0,873	Europe
	JPN 127		0,891	Asia
	UK  65		0,907	Europe
	USA 319		0,915	America
df = pd.DataFrame(np.random.randint(0,5,size=(5, 2)), columns=list('AB'))	# Initialize a dataframe with random ints with 5 rows and 2 columns
df.shape                                                    # Show the shape of the dataframe (rows, columns) => (7,3)
df.info()                                                   # Info for columns (index,name,dtype) also count of NaN-values per column
df.dtpyes()													# Shows datatype of every column
df.describe()                                               # Several statistic for the dataframe (median,max,min,std,...)
df.head()                                                   # Output of the first 5 rows per default
df.h
ead(22)                                                 # Output of the first 22 rows
df.tail()                                                   # Output of the last 5 rows per default
df.tail(22)                                                 # Output of the last 22 rows
df.columns                                                  # Output of all column names
df.columns["POPL","hdi","CONT"]								# Rename the columns
df.index													# Outputs the index
df.index = df["name"]										# Set index to column "name"
df.index = ["CAN","FRA","GER","ITA","JPN","UK","USA"]		# Assigning new index - replaces the default numeric index
df.size														# Outputs the size of the dataframe	
df.reset_index(inplace=True)                                # Resets the index - with inplace it is permanently saved
df.set_index("Popl", inplace=True)                          # Define "Popl" as new index - with inplace it is permanently saved
df.loc["CAN"]												# Selecting Rows by index - showing the row with the index = "CAN"
df.iloc[-1]													# Selecting Rows by position - showing the last row
df["Popl"]													# Selecting Columns by title - showing the whole column "Population" for all rows
df["Continent"].value_counts()                              # Output of alle values with their count
df["Continent"].value_counts(normalize=True)                # Output of alle values with their count in percent
df[["Popl","Continent"]]									# Showing cols Popl,Continent for all rows
df[["Popl","Continent"]] / 100								# Showing cols Popl,Continent for all rows - values divided by 100
df.loc["CAN":"ITA"]											# Show the rows from index CAN to ITA
df.loc["CAN":"ITA","Popl"]									# Show the rows from index CAN to ITA - only with the column1
df.loc["CAN":"ITA",["Popl","Continent"]]					# Show the rows from index CAN to ITA - only with the column1 + column3
df.loc[:,"col1":"col4"]										# Show the columns col1 to col4 for all rows
df.loc[0:2,"col1":"col4"]									# Show the columns col1 to col4 for 3 rows from index 0 to 2 (2 included)
df.loc[0:2,["col1","col3"]]									# Show the columns cols 1 and 3 for the rows from index 0 to 2 (2 included)			
df.iloc[0,-1]												# Show the 1st and last row => CAN,USA
df.iloc[1:3]												# Show 2nd and 3rd row for all cols => FRA,GER / Popl,HDI,Continent
df.iloc[1:3,1]	 											# Show 2nd and 3rd row for 2nd col => FRA,GER / HDI
df.iloc[1:3,[0,2]}											# Show 2nd and 3rd row for 1st and 3rd column => FRA,GER / Popl,Continent
df.iloc[1:3,1:3]											# Show 2nd and 3rd row for the 2nd and 3rd col => FRA,GER / HDI,Continent
df["Popl"] > 70												# Returns series with boolean True/False for every row (F,F,T,F,T,F,T)
df.loc[df["Popl"]] > 70										# Returns GER,JPN,USA for all cols
df.loc[df["Popl"] > 70, "Popl"]								# Returns GER,JPN,USA for col "Popl"
df.loc[df["Popl"] > 70, ["Popl","Continent"]]				# Returns GER,JPN,USA for cols "Popl" and "Continent"
df[["Open","Close"]]["2010":"2020"]                         # Output of 2 columns for the column slice
df[df.index.isin(["2020","2019"])][hist.columns[0:4]]       # Output specific rows and slice of columns
df[df.index.isin(["2020","2019"])][["Open","Close"]]        # Output specific rows and columns
df.drop("CAN")												# Drops the row CAN
df.drop(["CAN","JPN"])										# Drops the rows CAN,JPN
df.drop(["CAN","JPN"],axis=0)								# Drops the rows CAN,JPN (2nd method)
df.drop(["CAN","JPN"],axis="rows")							# Drops the rows CAN,JPN (3rd method)
df.drop(columns=["Popl","Continent"])						# Drops the cols Popl,Continent
df.drop(["Popl","Continent"],axis=1)						# Drops the cols Popl,Continent (2nd method)
df.drop(["Popl","Continent"],axis="columns")				# Drops the cols Popl,Continent (3rd method)
df.drop(df.index, inplace=True)								# Drops the whole dataframe
crisis = pd.Series([-10,-0,3],index=["Popl","HDI"])			# Define series with same col-names as in the dataframe - with some correction values
df[["Popl","HDI"]] + crisis									# Comines crisis-series to the df => all values in "Popl" -10 and "HDI" -0,3 in the df
langs = pd.Series(											# Define new series for new column in dataframe
	["FR","DE","IT"],										# => values of new column
	index=["FRA","GER","ITA"],								# => existing index in dataframe
	name= "lang")											# => name of the new column
df["lang"] = langs											# Creates new column in the dataframe according to the series "langs" - other rows will get "NaN"
df["lang"] = "GB"											# Values of all rows in the column "lang" will be changed to "GB"
df.rename(columns={"Popl":"POPL","Continent":"CONT"})	    # Renames column names
df.rename(index={"UK":"UnKi","USA":"US"})					# Renames index names
df["Popl_HDI"] = df["Popl"] / df["HDI"]						# Creates new column by dividing col "Popl" with col "HDI"
df["Popl"].median().max().min().sum().mean().qunatile()     # Different operations for the column in the dataframe
df["Timestamp"]=pd.to_datetime(df["Timestamp"])				# Changes Timestamp-String to Timestamp-Type (eg. read from csv-file before)
df.plot()													# Plotting the dataframe using the mathlib-module
df.plot(figsize=(12,6))										# Plot the dataframe
df.loc["2017-12-01":"2019-12-01"].plot(figsize=(12,6)))		# Plot the dataframe for the specific timeframe
df.isnull()													# Check for NaN values in the Dataframe => Matrix with True / False
df.notnull()												# Check for NOT NaN values in the Series => Matrix with True / False
df.isnull().sum()											# Sum of NaN values per column
df.dropna()                                                 # Deleting all rows with at least one NaN value in it
df.dropna(axis=1)											# Deleting all columns with at least one NaN value in it 
df.dropna(how="all")										# Deleting all rows where all columns are NaN
df.dropna(thresh=3)											# Deleting all rows where at least 3 columns are NOT NaN
df.fillna("missing")                                        # Replace NaN values with text     
df.fillna(method="ffill",axis=0)							# With forward-fill NaN-values are replaced with the value before (axis=0 means vertical / per column)
df.fillna(method="ffill",axis=1)							# With forward-fill NaN-values are replaced with the value before (axis=0 means horizontal / per row)
df["Sex"].unique()											# Shows the existing values for the column => eg: "M","F","D","?" (M/F is correct and D/? is wrong)
df["Sex"].value_counts()									# Shows the count of each existing value in the column => eg. "M" 175, "F" 132, "D" 5, "?", 3 => so 8 wrong entries
df["Sex"].replace("D","F")									# Change all "D" values in the column to "F"
df["Sex"].replace({"D":"F","N":"M"})						# Change all "D" to "F" and "N" to "M" in the column
df[df["Age"] > 100]											# Find all the invalid values in the age-column => eg. greater than 100 is invalid entry
df.loc[df["Age"]>100,"Age"]=df.loc[df["Age"]>100,"Age"]/100	# Fixing the invalid values for age by dividing it to 100 
filt = (df["col1" == "col1_val1"])                          # Defines new filter
filt2 = (df["col1"].isin(["val1","val2","val3"]))           # Defines new filter with several values
filt3 = (~df["col1"].isin(["val1","val2","val3"]))          # Defines new filter NOT with several values
filt4 = (df["col1"] > 123)                                  # Defines new filter with a > operator
df[filt]                                                    # Outputs the result for the above filter
df[filt]["col2"]                                            # Outputs the result for the above filter with only col2
df= df[(df['value'] >= df['value'].quantile (0.025))]		# Filter the elements for the top 2.5% of the dataset (quantile)
df= df[(df['value'] < df['value'].quantile (0.975))]		# Filter the elements for the bottom 2.5% of the dataset (quantile)
df.duplicated()												# Check duplicates for all rows (only first entry is not flagged as True)
df.duplicated(keep="last")									# Check duplicates for all rows (only last entry is not flagged as True)
df.duplicated(keep=False)									# Check duplicates for all rows (every entry is flagged as True)
df.duplicated(subset=["Name"])								# Check duplicates only for subset-col (only first entry is not flagged as True)
df.duplicated(subset=["Name"],keep="last")					# Check duplicates only for subset-col (only last entry is not flagged as True)
df.duplicated(subset=["Name"],keep=False)					# Check duplicates only for subset-col (every entry is flagged as True)
df["Data"].str.split("_")									# Split all the strings in the column at the blank-char "_" => eg. results [1987, M, US, 1]
df["Data"].str.split("_",expand=True)						# Split all the strings in the column at the blank-char and build seperate new columsn in the dataframe
df["Data"].str.contains("U")								# Check column if there exists an "U" in the string-values (True / False output as series) - also regex possible
df["Data"].str.strip()										# Eliminate the whitespaces at the beginning and end for the string-values
de["Data"].str.replace(" ","")								# Replace / Deletes blanks " " in the string-values
df.apply(lambda x: x.lower())                               # Function lower is used for the whole dataframe
df.apply(lambda x: x.lower(), axis="columns")[0:3]          # Function lower is used for the first 3 columns
df.sort_index(inplace=True)                                 # Sorting the new index ascending
df.reindex(sorted(df.columns), axis=1)						# Sorting the columns in dataframe	
df.sort_values(by="co1")                                    # Sorting by column ascending
df.sort_values(by="co2",ascending=False)                    # Sorting by column descending
df.sort_values(by=["col1","col2"],ascending=False)          # Sorting by 2 columns descending - first col1 and then col2
df["col1"].sort_value(ascending=False)                      # Sorting a series for one specific col descending
df.columns =) [x.upper() for x in df.columns]               # Change the column titles to uppercase
df["c1"] = df["c1"].apply(lambda x: x.lower())              # Function lower is used for the whole column
df["c1"].map({"val1":"val1new","val2":"val2new"})           # Change the names of the values - all others become NaN
df["c1"].replace({"val1":"val1new","val2":"val2new"})       # Change the names of the values - all others are not touched
df["cnew1"] = df["c1"] + df["c2"]                           # New column at the end
df.drop(columns=["c1","c2"], inplace=True)                  # Deleting 2 columns
df = df.append({"c1":"val1"},ignore_index=True)             # Add new row (all other cols are defined as NaN for the row)
df["col1"].nlargest(5)                                      # Outputs the 5 highest values in the column - only col1
df.nlargest(5,"col1")                                       # Outputs the 5 highest values in the column - all columns
df.nsmallest(5,"col1")                                      # Outputs the 5 lowest values in the column - all columns
col1_grp = df.groupby("col1")                               # Grouping according to col1
col1_grp.get_group("col1_value")                            # Access to one value from the group
col1_grp["col2"].median()                                   # Grouping col1 and output median for col2
col1_grp["col2"].median().loc[["A","B","C"]]                # Grouping col1 and output median for col2 only for 3 group-values
non_zero = df[df["col1"]!=0]                                # Filtering all Values with 0
df["newcol"]=["Y" if x > 50 else "N" for x in df["Sales"]]  # Add new column with Y/N depending if the value in col "Sales" is > 50
df["col"]=["Y" if x > 50 else "N" for x in df["col"]]  		# Change existing column with Y/N depending if the value in col is > 50
df["c"]=[1 if (x/y>9) else 0 for x,y in zip(df["c1"],df["c2])]	# Add/change column with 0/1 depending of calc of the variables x/y from 2 cols
----------



----------
###### MATPLOTLIB
import matplotlib.pyplot as plt                                     # Import module as plotter plt
plt.plot(x, x **2 )													# Plot a line
plt.plot(x, -1 * (x ** 2))											# Plot another line (in the other direction)
x_values = list(range(1000))                                        # Define x values
squares = [x**2 for x in x_values]                                  # Define y values / squares
plt.plot(x_values, squares)                                         # Plot diagram with x- and y-axes
plt.subplot(1,2,2)													# Plot 1st row, 2nd col in the 2nd diagram (any line after that will only access the 2nd diagram)
plt.scatter(x_values, squares, s=5)                                 # Sscatter diagram with x- and y-axes and line strenght = 5
plt.title("Title", fontsize=24)                                     # Title with fontsize = 24
plt.xlabel("X-Axe", fontsize=18)                                    # X-Axe title with fontsize = 18  
plt.ylabel("Y-Axe", fontsize=18)                                    # Y-Axe title with fontsize = 18
plt.tick_params(axis="both", which="major", labelsize=10)           # Params describtion with fontsize = 10
plt.axis([0,1100,0,1100000])                                        # Define scaling of axes
plt.scatter(x,y,c=squares,cmap=plt.cm.Blues,edgecolor="none", s=10) # Colors from one shade to another with different params
plt.scatter(x[0],y[0],c="green",edgecolor="none", s=100)            # Expoit the first point larger in green
plt.scatter(x[-1],y[-1],c="red",edgecolor="none", s=100)            # Expoit the last point larger in red
plt.axes().get_xaxis().set_visible(False)                           # Hide the complete x-axis description
plt.axes().get_yaxis().set_visible(False)                           # Hide the complete y-axis description
plt.figure(dpi=128, figsize=(10,6))                                 # Define custom figure size
plt.show()                                                          # Show diagram
plt.savefig("example.png",bbox_inches="tight")                      # Save diagram as png-picture-file
----------



----------
####### MODULE - SELENIUM
# chromedriver.exe in Ordner von py-file speichern
https://selenium-python.readthedocs.io/locating-elements.html	  # Different methods for locating elements	
from selenium import webdriver                                    # Import WebDriver für Zugriff auf URL
import time                                                       # Import Time-Library für Verzögerungen wenn notwendig
from selenium.webdriver.common.keys import Keys                   # Import Keys to send Key-strokes
driver = webdriver.Chrome(os.getcwd() + '/chromedriver')          # Driver für Chrome definieren - mit akt. Ordner os.getcwd
driver.get("url")                                                 # Zugriff auf die URL
driver.find_element_by_xpath('//*[@id="button"]/input').click()   # KLick auf ein ELement (Copy ) - mit Untersuchen - Copy XPath
time.sleep(1)                                                     # Manchmal notwendig um Verarbeitung abzuwarten
driver.find_element_by_xpath('//*[@id="name"]').send_keys("x"])   # Feld Name wird mit Inhalt x befüllt
field = driver.find_element_by_name("q").send_keys("txt")         # Feld wird nach Name gesucht
field = driver.find_element_by_id("xy-id")                        # Feld word nach ID gesucht
field = driver.find_elements_by_class_name("cl")[0]               # Felder werdem nach Class gesucht (als Liste)
field = driver.find_elements_by_tag_name("tag")[0]                # Felder werdem nach Tag gesucht (als Liste)
el.send_keys("textbla",Keys.Backspace,Keys.ARROW_LEFT,Keys.ENTER) # Send single keyboard-elements <> chars (needs import keys)
el.send_keys (u'\ue007')										  # Send an Return-keystroke (eg. for enter after data entries in fields)
field.submit()                                                    # Enter wird gedrückt bzw. die Seite abgeschickt
driver.quit()                                                     # Driver schließen (sonst schließt sich das Fenster nicht)
driver.title                                                      # Titel der HTML-Seite
driver.back()                                                     # Back-Function in browser-history
driver.forward()                                                  # Forward-Function in browser-history
cookie = {"name": "token", "value": "23874kljdsjhfaökldjs"}       # Define an individual cookie
driver.add_cookie(cookie)                                         # Use Cookie
driver.get_cookie("token")                                        # Outputs a specific cookie
driver.get_cookies())                                             # Outputs all cookies
driver.current_url												  # Read current, actual url
driver.switch_to.frame ("frame_id")								  # Swith to a frame-id (eg. a PopUp)
act_window = driver.current_window_handle						  # Read active window name
driver.switch_to.window(act_window)								  # Switch (back) to active window (eg. after working on the popup-frame or popup-window)

# Use Selenium with chrome windows hidden
from selenium.webdriver.chrome.options import Options
options = Options()
options.add_argument('--headless')                                          # Window Hidden
if platform == "win32": options.add_argument('--start-maximized')           # Window Started Maximized (for Windows)
elif platform in ["linux","darwin"]: options.add_argument('--kiosk')        # Window Started Maximized (for Linux and Mac)

options.add_experimental_option ('excludeSwitches', ['enable-logging'])     # No error messagegs when exec in cmd
driver = webdriver.Chrome(os.getcwd() + '/chromedriver', options=options)
----------



----------
####### MODULE - BEAUTIFUL SOAP
# see also details in BEAUTIFUL SOAP.ipynb
from bs4 import BeautifulSoap									# Import module for beautiul soap
from fake_useragent import UserAgent							# Import moduel for fake useragent
ua = UserAgent()												# Define UserAgent
ua.random														# Create random useragent
page = requests.get("https://www.ariva.de/dax-30")              # Read url as page
soup = BeautifulSoup (page.content,"html.parser")               # Read page with html.parser
table  = soup.find(id="result_table_0")                         # Read specific invidual id
name_box = soup.find("h1", attrs={"class": "99a4824b"})         # Read specific class
table.find_all("td"):    			                            # Read all table data cells
soup.find_all("tr", class_="arrow0"):       			        # Read all table rows for specific class
for col_id, col_content in enumerate(result.find_all("td")):    # Read all table data cells with id and content
entries = results.find_all("div", class_="col-xs-6")            # Read all divs with specific class
if row.get("class") == ["ellipsis", "nobr", "new"]:             # Check if class has specific content
for e in soup.find_all("a"): e.get("href"))                     # Read all links from href element    
for e in soup.find_all("a"): e.get("value"))                    # Read all number from the field "value"
content.text.strip()                                            # Outputs text without whitespaces
url_i = rows[0].find('img')['src']                              # Read url from the image
image = requests.get(f'https:{url_i}').content                  # Read image as content
results.prettify()                                              # Formated Output with html indentations
if "Kein Zugriff" in soup.text:                                 # Check if specific text in soup text-output
    
# Read with Selenium when necessary due the specific homepage
import time
import os
from selenium import webdriver
from bs4 import BeautifulSoup

driver = webdriver.Chrome(os.getcwd() + '/chromedriver')       # Use chromedriver.exe to read website
driver.get(link)                                               # Read link
time.sleep(2)                                                  # Wait till the full site is loaded
soup = BeautifulSoup(driver.page_source, 'html.parser')        # Read page with html.parser
time.sleep (2)                                                 # Wait again 2 seconds before closing the site
driver.quit ()                                                 # Close the chromedriver window
----------



----------
# MODULE - REQUESTS (working with APIs)
import requests										# import module requests
import json
api_request = requests.get ("apilink.html")			# Request api from the generated api-link
api = json.loads(api_request.content)				# Read/parse api-data to a json-loadfil
result = api[0]["xyz"]								# Read the value for the 1 element and the attribute xyz
----------



----------
###### MODULE - PYQT
pip install pyqt5                                      # Installation
from PyQt5.QtWidgets import QApplication               # Defines Application
from PyQt5.QtWidgets import QLabel                     # Defines Label
from PyQt5.QtWidgets import QWidget                    # Defines Widget
from PyQt5.QtWidgets import QHBoxLayout                # Arranges horizontally from left to right
from PyQt5.QtWidgets import QVBoxLayout                # Arranges vertically from top to bottom
from PyQt5.QtWidgets import QGridLayout                # Arranges in grid from on x and y axes
from PyQt5.QtWidgets import QFormLayout                # Field for forms - 1col are titles, 2col are fields,rbs,cb
from PyQt5.QtWidgets import QPushButton                # Defines PushButton
from PyQt5.QtWidgets import QDialog                    # Module for dialog windows
from PyQt5.QtWidgets import QDialogButtonBox           # Module for button boxes in dialog windows
from PyQt5.QtWidgets import QLineEdit                  # Defines input field with text
from PyQt5.QtWidgets import QMainWindow                # Module for main windows
from PyQt5.QtWidgets import QStatusBar
from PyQt5.QtWidgets import QToolBar
app = QApplication(sys.argv)                           # Create an instance of the application
w = QWidget()                                          # Initialize a window
w.setWindowTitle('Windows Title')                      # Title of the windows
w.setGeometry(200, 200, 380, 180)                      # Define windows (1:x-coord,2:y-coord,3:width,4:height)
w.move(50, 15)                                         # Place / move windows to coodinates 60,15
msg = QLabel('<h1>Hello World!</h1>', parent=window)   # Define label / message in format h1
msg.move(50, 15)                                       # Place / move labe to coordinates 60,15
windows.show()                                         # Show the application GUI - schedules a paint event
sys.exit(app.exce_())                                  # Start the app and close it with sys.exit
layout_qh = QHBoxLayout()                              # Defines horzontal box
layout_qv = QVBoxLayout()                              # Defines vertical box
layout_qg = QGridLayout()                              # Defines grid layout
layout_qf = QFormLayout()                              # Defines form layout
layout_qh.addWidget(QPushButton('Button1'))            # Defines one or more buttons
layout_qv.addWidget(QPushButton('Button1'))            # Defines one or more buttons
layout_qg.addWidget(QPushButton('Button1'),1,0)        # Defines one or more buttons and set it to position 1,0
layout_qg.addWidget(QPushButton('Button1'),2,1,1,2)    # Set buttons to position 2,1 and span it 1row/2cols
layout_qf.addRow("text:", QLineEdit())                 # Defines input field 
w.setLayout(layout_xy)                                 # Sets layout dimensions to window
class Dialog(QDialog):                                 # Defines a class dialog which inherits from QDialog
buttons = QDialogButtonBox()                           # Define buttons for a dialog window
buttons.setStandardButtons(QDialogButtons.OK)          # Defines a ok button on a dialog window
layout_qv.addWidget(buttons)                           # Adds buttons to vertical layout
class Window(QMainWindow):                             # Defines a class Windows which inherits from QMainWindow
----------



----------
###### MODULE - TKinter
https://www.youtube.com/watch?v=YXPyB4XeYLA					# Tutorial with deep explanation
from tkinter import *										# Import tkinter module
root = Tk()													# Create root window
root.title("Header Title")                              	# Name of the window in the title
root.iconbitmap("pic.ico")                                  # Define icon for the windows (left upper corner)
root.geometry("400x400")									# Define size of the window
myLabel = Label(root,text="Hello World!")               	# Creating a label widget
myLabel.pack()												# Showing myLabel on the screen
myLabel.grid(row=0,column=0,pady=10)   						# Showing myLabel on grid place 0/0 (left upper corner) with 10pixel padding from above
status = Label(root,text="St",bd=1,relief=SUNKEN,anchor=E   # Creating a status label widget with border (bd=1), sunken relief and anchor position right (east)
status.grid(row=2,column=0,columnspan=3,sticky=W+E)         # Showing status bar - with using maximum space from left to right (west to east) with sticky
myButton = Button(root,text="Click Me!")  					# Creating a button widget with a name
myButton = Button(root,text="Click Me!",state=DISABLED) 	# Creating a deactivated, greyed button widget with a name
myButton = Button(root,text="C",padx=50,pady=50)			# Creating a button widget with a name and size 50 * 50
myButton = Button(root,text="T",command=myfunc)     		# Creating a button which will excute the myfunc-function when its clicked
myButton = Button(root,text="T",command=lambda: func(nr))   # Creating a button which will excute the func-function with a numeric parameter
myButton = Button(root,text="col",bg="blue",fg="white") 	# Creating a button with background blue and foreground white
QuitButton = Button(root,text="exit",command=root.quit)		# Create a quit-button on the window
myEntry = Entry(root, width=50, borderwidth=5).pack()       # Creating a entry field - with width 50 and borderwidth 5 - and showing the field
myEntry.grid(row=0,column=0,columnspan=3)               	# Showing myEntry as grid in row/col = 0/0 and spanned over 3 columns
e.grid(row=0,column=0,padx=10,pady=10)						# Showing myEntry as grid in row/col = 0/0 and with pading in x/y-axes 
myEntry.get()												# Read content of the entry field
myEntry.insert(0,"Default-Text")                        	# Shows a default value in the entry field
myEntry.insert(0, number)									# Insert a number into the entry field
myEntry.delete(0,END)										# Delete content of the entry field
root.mainloop()												# Mainloop of the program
...command=wind.destroy										# Close window "wind"

###Pics in Tkinter-Windows
from PIL import ImageTk,Image								# Additional module Pillow neede (install with <pip install Pillow>
my_img = ImageTk.PhotoImage(Image.open("demo.png"))			# Reads Image wiht Pillow-module (Tkinter can not read png/jpg files)
my_label = Label(image=my_img)								# Creating a Label with the image
my_label.pack()												# Showing the pic

###Define Frame
frame = LabelFrame(root,text="Name_Frame",padx=5,padx=5)	# Creating a frame with padding 5/5 (inside the frame)
frame.pack(padx=10,pady=10)									# Showing the frame with padding 10/10 (outside the frame)	
button = Button(frame,text="Name_Button")					# Creating button in the frame (not root window)
button.grid(row=0, column=0)								# Showing the button in the frame as grid (with frames is mixing between pack and grid possible)

###RadioButtons
r = IntVar()												# Define variable for radio button - when string use StringVar()
r.set("2")													# Choose default radio button	
Radiobutton(root,text="Opt1",variable=r,value=1).pack()		# Define and show radiobutton 1
Radiobutton(root,text="Opt2",variable=r,value=2).pack()		# Define and show radiobutton 2
r.get()														# Get value from choosen radio button

###MessageBox
messagebox.showinfo("Title of PopUp", "Hello World!")		# Show Messagebox
different boxes available: showinfo, showwarning, showerror, askquestion, askokcancel, askyesno
response = messagebox.askquestion ("Bla", "BlaBla!")		# Show AskQuestion Box and store response
if response == 1: Label(root, text= "YES").pack()			# Check about response of user in message box
elif response == 0: Label(root, text= "NO").pack()

###More Windows
def open()													# Function for opening the 2nd window
	global my_img											# Global definition necessary - otherwise no pic would be drawn
	sec = TopLevel()										# Define 2nd window
	sec.title("2nd Window")									# Title for 2nd window
    img = ImageTk.PhotoImage(Image.open("demo.png"))		# Define image
    Label (top, image=img).pack()							# Show image in 2nd window	
btn=Button(root,text="Open 2nd Window",command=open).pack()	# Button for opening 2nd window per click

###FileDialog
root.filename = filedialog.askopenfilename(					# Define filname dialog
    initialdir="/Users/Bla/images",							# Define initial dir for the file dialog				
    title="Select file",									# Title of the file dialog
    filetypes=(("png files","*.png"),("all files","*.*")))	# Define filetypes in dialog (first name, second which files, default first entry)
my_label = Label(root, text=root.filename).pack()			# After choosing a file - show the filename + filepath

###Slider
vertical = Scale(root,from_=0,to=200)						# Define vertical slider
vertical.pack()												# Showing vertical slider
horizontal = Scale(root,from_=0,to=200,orient=HORIZONTAL)	# Define horizontal slider
horizontal.pack()											# Showing horizontal slider

###Checkboxes
Checkbutton(root,text="Check1",variable=var).pack(			# Define and Show a checkbox
c.select() or c.deselect()									# Select or Deselect per default the checkbox

###DropDown
options=["Mo","Tu","We","Th","Fr"]							# Define options for dropdown menue
var = StringVar()											# Define variable for dropdown menue
var.set("Mo")												# Set default for dropdown menue
OptionMenu(root,var,*options).pack							# Define dropdown menue
----------



----------
###### MODULE - PYGAME
###http://pygame.org/docs/
import pygame as pg                                      # Import of the pygame module
pg.init()                                                # Initialize and setup screen
screen_dim = (1200,800)                                  # Define dimension
screen = pg.display.set_mode(screen_dim)                 # Show screen with the defined dimensions
bg_color = (230,230,230)                                 # Define background color
screen.fill(bg_color)                                    # Screen filling with defined background color
pg.display.set_caption("My Super Game")                  # Title of the game in the window
rect screen.get_rect()                                   # Rectangle infos (left,top,width,height - (0,0,1200,800)
rect.center                                              # Center of the Rectangle as tuple - (600,400)
rect-size                                                # Size of the Rectangle as tuple - (1200,800)
rect.left                                                # X-Dim left - (0) 
rect.right                                               # X-Dim right - (1200)
rect.top                                                 # Y-Dim top - (0)
rect.bottom                                              # Y-Dim bottom - (800)
rect.centerx                                             # Middle of X-Dim - (600)
rect.centery                                             # Middle of Y-Dim - (400)
rect.width                                               # Width of the rectangle - (1200)
rect.height                                              # Height of the rectangle - (800)
small_rect = pg.Rect(100,100,10,150)                     # Define new rectangle
pg.draw.rect(screen,(100,100,100,small_rect)             # Draw small rectangle in screen
figure = pg.image.load("ship.png")                       # Loading an image
figure.get_rect()                                        # Getting the rect object from an image
figure_rect.midbottom = screen_rect.midbottom            # Positioning an image in the middle of the bottom screen
screen.blit(figure, figure_rect)                         # Drawing an image to the screen
for event in pg.event.get():                             # Check if an event has happend (keystroke, mouseclick)
event.type == pg.KEYDOWN:                                # Check if key is pressed
event.key == pg.K_RIGHT:                                 # Some action when Right-Key is pressed
event.key == pg.K_SPACE:                                 # Some action when Space-Key is pressed
event.type == pg.MOUSEBUTTONDOWN                         # Check if mousebutton is clicked
mouse_pos = pg.mouse.get_pos()                           # Findinig the mouse position
button_rect.collidepoint(mouse_pos)                      # Check if mouse-cursor is ofer an object / rectangle

### Pygame groups
from pygame.sprite import Sprite,Group                   # Group class for working with similar objects
def Bullet(Sprite):                                      # Making and filling a group - must inherit from Sprite
    def draw_bullet(self):                               # Method from the new group
    def update(self):                                    # Method from the new group  
bullet = Group()                                         # Define group of elements
new_bullet = Bullet()                                    # Define new instance
bullets.add(new_bullet)                                  # Add new instance to group
from bullet in bullets.sprites(): bullet.draw_bullet()   # Iterate through group instances and draw
bullets.update()                                         # Calls the methode update() on each member of the group
bullets.remove(bullet)                                   # Remove instance from group
prg.sprite.spritecollideany(obj,group)                   # Check if single object is overlapping with groupelements
pg.sprite.groupcollide(group1,group2,True,True)          # Result-Dict with all overlapping elements of both groups
msg = "Play again!"                                      # Define message
msg_col = (100,100,100)                                  # Defines message color
bg_col = (230,230,230)                                   # Defines background color
font = pg.font.SysFont(None,48)                          # Defines font from system font
msg_img = f.render(msg,True,msg_col,bg_col)              # Create an image of the message
msg_img_rect = msg_image.get_rect()                      # Read rect from message-image
msg_img_rect.center = screen_rect.center                 # Pos the message-image in the middle of the window
screen.blit(msg_img, msg_img_rect)                       # Display the positioned message-image
----------



----------
####### PYINSTALLER
pip install pyinstaller                                       # Installation
pyinstaller prg.py                                            # Generate the bundle in a subdirectory called dist.
pyinstaller --onefile prg.py                                  # Generate only one file
--icon=app.ico                                                # Generate file with icon
--hidden-import=pkg_resources.py2_warn                        # Generating under mac os sometimes only work with this params
--exclude-module matplotlib                                   # when there is a depreciating warning from matlib        
prg.exe                                                       # Open this file to start the python-program

### Problems with some added python modules (eg. pycountry)
when trying to execute the compiled exe-file - there is an error about the pycountry-module - workaround:
1) use command <pyi-makespec --onefile temp2.py> to generate a temp2.spec file
2) change filename.spec
	=> from PyInstaller.utils.hooks import copy_metadata (in the header)
	=> in the a = Analysis(...) section change " datas = []," to <datas = copy_metadata("pycountry"),>
3) use pyinstaller to compile exe as above
Alternative: compile program before - change spec - an use command <pyInstaller --clean temp2.spec>

### Problems with path when executing from py and exe   
config_name = 'creds.json'                                    # Define the config file name
### determine if application is a script file or frozen exe
if getattr(sys, 'frozen', False):                             # Get path when starting as executable
    application_path = os.path.dirname(sys.executable)
elif __file__:                                                # Get path when running from IDE as py-file
    application_path = os.path.dirname(__file__)
config_path = os.path.join(application_path, config_name)     # Final Config Path   
----------



----------
####### Virtual Box - MacOs
Right-Ctrl Home       					# Open Menü in VirtualBox
Read USB-Stick							# Menü aufrufen => "Geräte" und "USB" auswählen

----------