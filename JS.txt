###########
### TOC ###
###########

# OPERATOR, INPUT, OUTPUT
# STRING
# ARRAY
# OBJECT
# CONSTRUCTOR / CLASS
# CONTROL STRUCTURE AND ITERATION
# FUNCTION
# API ACCESS



###### OPERATOR, INPUT, OUTPUT
// Comment something	 					# Comments in Javascript
let intStr = "7"							# Declare and assign string (possible with "" or '')
"/n /t"										# Linebreak and Tab should not used - is morely css-stuff for formating
let age = 25								# Declare a variable and assign int (also signed int like -36)	
const age = 25								# Declare a constant and assign int (constant can not be changed like variables)
let float = 5.14876							# Declare and assign float (also signed float like +4.5763	
let intNum = parseInt(intStr,10);			# Change String to Int with base 10
let floatStr = "5.14673"					# Declare and assign string
let floatNum = parseFloat(floatStr);		# Change String to Float
num.toString()								# Convert numeric value to string
num + ""									# 2nd method to convert numeric value to string
7 % 2                  			        	# Modulo / Rest of the division (=> 1)
x == y 										# Check 2 values / variables (result in true / false)
x === y										# Equal value and equal type
x != y										# Not equal
x !== y										# Not equal value and not equal type
>,<,>=,<=									# Greater, lesser, greater + equal , lesser + equal
num++;										# Makes variable +1
console.log(num)							# Outputs variable num in console
alert("Text!")								# Alert information in a window
alert("Bla ${name} bla")					# Alert some text with outputing the variable "name" between
Math.sqrt(9)								# Return the square-root => 3



###### STRING
.toLowerCase()								# Lowercase the whole string
.charAt(1)									# Returns the second char of a string



###### ARRAY
let arr = [];									# Define an array
let arr = [6,7,8]; 						  		# Define an array and initialize it
let mat= [[1,2,3],[4,5,6],[7,8,9]]				# Define multidim array
arr[1]											# Get second element => 7
mat[1][1]										# Get element in the matrix => 5
arr[2] = 9										# Replace the third element
arr.length										# Total count of the elemets in the array
arr.pop()										# Extracts and delete element at the end (fast!)
arr.shift()										# Extracts and delete element at the begin (slow!)
arr.push("X","Y)								# Append new elements to the array at the end (fast!)
arr.unshift("Y","Z")							# Add new elements to the array at the beginning (slow!)
for (let i=0; i < arr.lenth; i++) {do smth.}	# Iterate through index of the array
for (let elem of arr) {alert(arr)}				# Iterate through array elements
arr.forEach((x,i) => console.log(x))			# Iterate through array by elements (x) and index (i)
String(Arr)										# Returns list as a string => "6,7,8"
a1 === a2										# Must allways be compared with triple = (only == would be wrong)



###### OBJECT
# properties => attributes of the object (eg. color, shape, minutes, seconds)
# methods => functions of the object (eg. start/stop on a stopclock)
# everything in javascript is an object (with properties / methods)
# eg. arr.length is a property of the object array
# eg. arr.pop() is a method of the object array
let o = {}										# Define an object
let o = {name: "John", age: 30}					# Define an object and initialize it
o.name											# Shows value of the key "name" (1st method) => John
o["name"]										# Shows value of the key "name" (2nd method) => John
o.age											# Shows key "age" of the object => 30
o.newOne										# Add a new propertie to the object
o.newMethod = function(var) {...do someth...}	# Add a new method to the object
o.newMethod(25)									# Call the new method
age in o 										# Check if key is in the object
delete o.age									# Delete a property of an object
for (let key in o) {alert(key,alert, o[key]}	# Iterate through the keys of the object and outputs key and value

# Other example for an object
var school = {
  name: 'The Starter League',
  location: 'Merchandise Mart',
  students: 120,
  teachers: ['Jeff', 'Raghu', 'Carolyn', 'Shay']
};




###### CONSTRUCTOR / CLASS
# make a Object with the old method
function MakeCar (carMake,carModel,carColor){		# Define the constructor function
	this.make = carMake								# Define properties for the constructor
	this.carModel = carModel						# "this" is referencing to the actual object
	this.carColor = carColor
	this.honk = function(){							# Define a mtehod for the constructor
		alert("BEEP ${this.carModel} BEEP")			# Alert something when the method is called (with prop this.carModel)
	}
}
let car1 = new MakeCar("Honda","Civic","black")		# Create a new car1 (with codeword "new")
let car2 = new MakeCar("Tesla","Roadster","red")	# Create a new car1

# make a Object with the new class method
class MakeCar{ 										# Define the class
	constructor (carMake,carModel,carColor){		# Define properties for the class
		this.make = carMake							# Assign the properties of the class to the concrete individual object
		this.carModel = carModel					# "this" is referencing to the actual object
		this.carColor = carColor
	}
	honk(){											# Define a method for the class
		alert("BEEP ${this.carModel} BEEP")			# Alert something when the method is called (with prop this.carModel)
	}
}
let car1 = new MakeCar("Honda","Civic","black")		# Create a new car1 (with codeword "new")
let car2 = new MakeCar("Tesla","Roadster","red")	# Create a new car1



###### CONTROL STRUCTURE AND ITERATION
if (condition is true) {
	//Do something
}else if (condition is true){
	//Do something else
}else{
	//Default else
}	

if (a == 9) && (b == 7) { c = "Hurra!" }		# If structure with logical and	
if (a == 9) || (b == 7) { c = "Hurra!" }		# If structure with logical or
while (x < 4) {}                 				# While loop with break condition
do {} while (x < 4)								# Do While loop with break condition
while (true) {}                  				# Endless while loop - has to be exited somewhere
for (let i=1; i<=5; i++) {}						# Iteration from 1 to 5 with for-loop
Array.from(arr).forEach(element) => element...	# Iterate through and an array and do something with every element (eg. addEventListener)



###### FUNCTION
function add(x=0,y=0) {						# Defome a function	- with default value 0 if no input is given
	let erg = x+y;							# Calculate erg
	return erg;								# Return erg value
}

# return-statement with "?" or "||"
	return (age > 18) ? true : console.log('Did parents allow');		# When age > 18 returns true - otherwise output something in the console
	return (age > 18) || console.log('Did parents allow');				# Same logic with "||"

document.querySelector('#check').addEventListener('click',func1)		# New Method / create an Event Listener / execute function "func1" when mouse is clicked
document.querySelector('#check').addEventListener('onmouseenter',func2)	# New Method / create an Event Listener / exceute function "func2" when mouse-cursor is over the element
document.getElementById("green").onclick = funcGreen					# Old Method / Waiting for click on this element (by ID) as a "event-listener"

# E.G. document.querySelector('#idBlue').addEventListener('click',changeToBlue)

function funcGreen() {										# Define function
  document.querySelector("body")
	.style.backgroundColor = "rgba(241,63,247,1)"			# Change BackGroundColor-Style to rgba-color green (as inlinecode in the rendering - not in the html-code)
  document.querySelector("body").style.color = "white"		# Change Fontcolor to white (as inlinecode in the rendering - not in the html-code)
}

# E.G. document.querySelector("body").style.backgroundColor = "blue"

document.getElementById							# Old Method / Select an element by ID
document.querySelector("xyz")					# New Method / Select (first) a <tag> or .class or #id
const c = document.querySelectorAll("h2")	    # Select all elements which have h2 and store it in the constante c
.onclick										# Element-Listener waiting for a click7
.style.backgroundColor							# Change BackgroundColor
.style.color									# Change Font Color	
.style.display = "none"							# Hide element in DOM
.innerText = "xyz"								# Change Text of the selected element
.innerText = v1 + " " + v2 + " " + v3			# Concatenate 3 variables with space between (old method)
.innerText = "${v1} ${v2} ${v3}"				# Concatenate 3 variables with space between (new method)
.value											# Read the value/text of the field
.classList										# Manipulate classes informations
.classList.toggle("hidden")						# Toggle the class hidden (when triggered class is deleted OR added (when the next click occured)
.classList.add("hidden")						# Add the classe hidden
.classList.contains("cl")						# Check if element contains class "cl"
.classList.remove("wiggle")						# Remove the class from the element
setInterval(()=> {do something},10000)			# Do something any 10 seconds
setTimeout(()=> {do something,1000}]			# Do something and wait 1 second



###### API ACCESS
https://learn.shayhowe.com/advanced-html-css/jquery/
# request data from API
# get data back in JSON format
fetch(url)										# Reading / Fetching the informations from an API-url
	.then(res => res.json())					# Request the API-content and output as JSON-information
	.then(data => {								# Acees the returned data of the API
		console.log(data)						# And do something with the data
	})
	.catch(err => {								# Standard Error Handling
		console.log("error ${err}")
	});



###### JQUERY
library for javascript
- Traversing
- Manipulating
- Events
- Effects
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>		=> include before </body> tag
$(document).ready(function(event){...});		# put all jQuery code in this function (waiting until the the page has loaded an the DOM is ready)
$('.feature');           						// Class selector
$('li strong');          						// Descendant selector
$('em, i');              						// Multiple selector
$('a[target="_blank"]'); 						// Attribute selector
$('p:nth-child(2)');     						// Pseudo-class selector















	