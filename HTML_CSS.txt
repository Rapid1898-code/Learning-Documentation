### Overview
HTML = content / structure (core focus...)
CSS = style (a little bit...)
JS = behaviour / interaction (a little bit...)
=> bandwidth focus more html and less of css/js
----------



### HTML Structure
https://in.pinterest.com/pin/345862446359675335/
index.html                              	# Should be the first site
<!DOCTYPE html>								# Standard structure in the html-file
<html>
    <head>
        <!--Stuff the browser needs -->
    </head>
    <body>
        <!--Everything the user sees -->
    </body>
</html>



### HTML Grouping - Layout
https://www.w3schools.com/html/html_layout.asp
<header>...</header>						# eg. menue at the title
<nav></nav>                             	# Navigation info for the user (unordered ul list normaly)
<section></section>                     	# part of the homepage - eg. the core middle of the site
<article></article>							# part of the section - can be taken and dropped to another place
<aside></aside>								# mostly on the side of the homepage - something you can take away and the page would still be working
<div></div>                             	# grouping some html-area
<footer></footer>							# bottom of the document



### HTML Elements
https://www.w3.org/community/webed/wiki/HTML/Training/Tag_syntax#:~:text=HTML%20is%20using%20tags%20for,to%20compose%20an%20HTML%20element.
https://developer.mozilla.org/de/docs/Web/HTML/HTML5/HTML5_element_list
<!-- This is a comment -->              # commentar in HTML
<p>text</p>					        		# Normal Paragraph (long text)
<p>Text <a href="www.x.com">X</a></p>		# Paragraph / Text with anchor link
<p class="nine">Hello</p>					# Paragraph with a class
<span>text</span>		    				# Short text
<h1>Import Header</h1>						# Header1-Tag with Text (most important on the page)
<h2>2nd important thing</h1>				# Header2-Tag with Text (second important)
<h6>6th important thing</h1>				# Header6-Tag with Text (sixth important thing on the page)
<img src="pic.jpeg">                    	# Insert picture - no close tag
<pre> </pre>								 Preserves whitespace (not good - should be done by CSS)
<br>, </br>									# linebreak (not good - should be done by css)
<hr>, </hr>									# htmlbreak (not good - should be done by css)

<ul>										# Unordered List with anchor links
	<li><a href="x.html">One</a></li>
	<li><a href="y.html">Two</a></li>
	<li><a href="z.html">Three</a></li>
</ul>	

<ol>										# Ordered List
	<li>One</li>
	<li>Two></li>	
	<li>Three></li>
</ol>

<table>
	<tr>
		<th>First table header</th>
		<th>Second table header</th>
	</tr>
	<tr>
		<td>First row, first column</td>
		<td>First row, second column</td>
	</tr>	
	<tr>
		<td>Second row, first column</td>
		<td>Second row, second column</td>
	</tr>		
</table>


### Forms, Buttons
<form action="confirmation.html" method="post">
    <label for="zebra">First Name:</label>
    <input id="zebra" type="text" name="" value="">
    <input type="tel" name="" value="">
    <input type="email" name="" value="">
</form>
<button id="check" type="button" name="button">check</button>




### CSS Attributes
https://www.w3schools.com/cssref/
color: red; 								# Define red color for element
color: #FF0000;								# Define color with hex code
color: rgba(255,0,0,1);						# Defome color with rgb code (4th parameter is opaque - 0.5. means half transparent, 1 no transparent)
color: hsla(0, 100%, 50%,1);                # define color per hsla value 
font_weight: bold;							# Font bold
font_weight: 700;							# Define when a font is downloaded from eg. google fonts
font-size: 25px;							# Define font size with 25 pixel
font-style: italic;							# Font italic / cursive
line-height: 1.5,;							# Defines line-height as 1.5 of the normal height
text-decoration: underline red;				# Define text decoration a red underline
text-decoration: line-through;				# Define text with line-through
text-align: center;							# Center text / or list-entries in ul
background-color: #e2b007;					# Define background color
border: 3px solid #FFA500;					# Define border of element (width, style, color) - "shorthand"-method
border: thin solid red;						# Define border of element (width, style, color) - "shorthand"-method
border-bottom: 6px dashed #FFA500;			# Define only the bottom-border - "longhand"-method	
border-bottom-width: 12px;					# Define only the bottom-border-width - "longhand"-method	
border-radius: 5px;							# Define a border radius with 5 pixel - "shorthand"-method
border-top-right-radius: 5px;				# Define the border radius for top right corner  - "longhand"-method
height: 100px;								# Height of the box
margin: 20px;								# Margin of the box (outside the border, for all 4 sites) - "shorthand"-setting
margin: 10px 20px;							# Margin of the box (10 pixel for top/bottom and 20 pixel for left/right)
margin: 10px 20px 0 15px;					# Margin of the box (clockwise from tom) => 10px top, 20px right, 0px bottom, 115px left
margin: 100px 0;							# Margin of the box => will do this clockwise for top+right and bottom-left => 100px for top+bottom, 0 for right+left
margin: auto								# Set the margin automatc - wg. when the width is set to a percentage
padding: 20px;								# Padding of the box (inside the border)
margin-top: 10px							# Setting the margin to 10 pixel - "longhand"-method
padding-left: 6px							# Setting the padding to 6 pixel - "longhand"-method
width: 50%;									# Define width in percent (relative to the width of the parent element)
width: 5em;									# Define width (calculated on elements font size - when font-size=14px - the width would be 70px (5*14)
height: 200px;								# Define height of element	
max-width:20%;								# Resize something eg. img
max-height:20%;								# Resize something eg. img
list-style-type: none;						# no bullets in unordered list (using at ul-element)
display: inline;							# show elements in line - eg. horizontal li-elements
float: left;								# Define floating for an image (text will float her on the right side of the image)
clear: both;								# Clear floating (for left and right)
transistion: background 5s;					# Change the background fading in for 5 seconds	(eg. going from white to dark blue)



### CSS
should go in seperate file (better than inline or in the head)
css statements are called "rules"
resetting all browser-styles: http://meyerweb.com/eric/tools/css/reset/
normalize the alle browser-styles: github.com/necolas/normalize.css
<link rel="stylesheet" href="css/style.css">    # link the html-file to the css-file
/* comment */

p {                                             # syntax of the css statement / rule
    color: red;                                 => (p => selector, color:red; => declaration)
}                                               => color => property, red => value)

p {                                             # set rule with 2 declerations for p => red and bold
    color: red;
    font_weight: bold;
}

### Cascade Rules (but Specificity overrules - see below)
p {                                             # cascading rules (from top to bottom, step by step)
    color: red;                                 =>output is blue+bold
    font_weight: bold;
}
p {
    color: blue;
}



### Font Definition
https://fonts.google.com/
taken from google fonts for example (take fonts and then create link in upper right corner for the link
<head>                                          # define in html in the header
    <link href="https://fonts.googleapis.com/css2?familiy=Source+Sans+Pro:wght@300;400;700&display=swap" rel="stylessheet">
</head>
p {
    font-family: "Source Sans Pro", "Helvetica" sans-serif;			# Helvetica and sans-serif are the fallback fonts when Source Sans Pro is not loading
}



### Parent > Child Relationsships
<section>
    <p>hello, twitch!</p>
</section>                                      # direct parent relationsship > child connection with ">"
section > p {                                   # direct child connection (only the p which are direct unter section
    color:red;                                  # p is the direct child of section
}

<section>
    <article>
        <p>hello, twitch!</p>
    </article>
</section>                                      # normal parent child connection (ignores deepeness)
section p {                                     # all connections above (when there is a p - somewhere on a level - in the section)
    color:red;                                  # p is the grandchild of section / somewhere a child of section
}

<section>
    <p>Hello, Twitch!</p>
	<p>Hello, YouTube!</p>
</section>										# previous sibling + next sibling
p + p {											# format is used when two <p>s are after each other
	color: red;									# only the second p will get red
}



### Classes	
<section>
	<p class="robot">Hello, Twitch!</p>
	<p id="zebra" class="bob">Hello, YouTube!</p>
	<p class="bob">Goodbye!</p>	
</section>										# class is used for formating many different elements	
.bob {											
	color: red;
}	
.class1.class2 {...}							# both classes have to be in the SAME element
p.class1.class2 {...}							# both classes have to be in the SAME element - only for p-elements
.class1 .class2 {...}							# the parent-element has to be class1 and the child-element class2
section.class1 h2.class2 {...}					# the parent-element <section> has to be class1 and the child-element <h2> class2
.class1,.class2 {...}							# one of the classes have to be in the element
p.class1, a.class2 {...}						# rule is for <p> with class1 or <a> with class2
body article.class1 h2.class2.class3 {...}		# h2, which have class2+classe3 in h2, their parent has class1, and the parent is in body
aside.aExtra h3									# rule for <h3> which have a parent-element <aside> with class aExtra



### IDs
<section>
	<p>Hello, Twitch!</p>
	<p id="zebra">Hello, YouTube!</p>
</section>										# id is used for formating unique elements
#zebra {color: red;}							# can used only ONE time - only one id per element - nothing else can have this id
#class1,#class2 {...}							# one of the ids have to be in the element
body section.top h2#rhino {...}					# h2, which has id=rhino, the parent has class=top and the parent is in body
section#aMilk h2								# rule for <h2> which have a parent-element <section> with id aMilk



### Inline Style / !important
.bob {
	color: red !important;						# with !important this style get the maximum priority / overwrites everything
}												# not often used - eg. in cases of immediate urgency to show something - when a error is not found cxurrently



### Specificity
https://down4kode.wordpress.com/2014/05/21/css-specificity-calculator/
# defines the priority which styles can overwrite which style
# priority has the style which came later - but only when the specificity is equal or higher!
1 point for tags
10 points for classes
100 points for ids
1000 points for Inline Style
p{}								=> 1 point (1 tag)
#zebra{} 						=> 100 points (1 id)
section .bob { }				=> 11 points (1 tag + 1 class)
.bob{ !important }				=> 1010 points (1 class + 1 other)
section1,section2 .bob { }		=> 11 points (1 tag + 1 class) for section1 and for section2



### Box Model / Boxing
https://en.wikipedia.org/wiki/CSS_box_model#/media/File:Boxmodell-detail.png
every element is a box - box in the middle
box has a heigth and width - eg. 100px*100px
padding outside the box - between box and border (top,right,bottom,left)
border (outside padding) (top,right,bottom,left)
margin (outside border) (top,right,bottom,left)
*{box-sizing: border-box}					# With this statement every sizing is included with the border


 
### Layouts - Floating
old layouting - not state of the art!
element tries to got as much up to the top - and as much left (or right according if floated left or right)
normaly everything will float to the left

Positioning Content
<header>...</header>						# example1 - without cass all the elements will be positoned from top to bottom
<section>...</section>
<aside>...</aside>
<footer>...</footer>

section {									# with that css-command section and aside will be on the same level
	float:left;								# section on the left side and aside on the right side
}
aside {
	float:right;
}

section {									# with that css-command section and aside will be on the same level
	float:left;								# section on the left side with 63% of the space and aside with 30% of the space
	margin 0 1.5%;							# both have a margin outside the element
	width: 63%
}
aside {
	float:right;
	margin 0 1.5%;
	width: 30%
}	
footer {
	clear: both;							# after the float - the floats have to be cleared to get the old normal vertically float
}
	
<header>...</header>						# example2 - without cass all the elements will be positoned from top to bottom
<section>...</section>
<section>...</section>
<section>...</section>
<footer>...</footer>	

section {									# with that all 3 section elements will float left
	float: left								# so they are horizontal alligned side by side
	margin 0 1.5%;							# width has to be adjusted accordingly
	width: 30%
}
footer {
	clear: both;							# after the float - the floats have to be cleared to get the old normal vertically float
}



### Layout - Flexbox
section [ display: flex; }						# initialize flexcontainer (parent element of the flex items)
section { justify-content: flex-start; }		# put elements to the max left - horizontally
section { justify-content: flex-end; }			# put elements to the max right - horizontally
section { justify-content: center; }			# center the elements horizontally
section { justify-content: space-around; }		# place elements with space around horizontally
section { justify-content: space-between; }		# place elements with space between the elements horizontally
section { align-items: flex-start; }			# align elements at the top vertically
section { align-items: flex-end; }				# align elements at the bottom vertically
section { align-items: center; }				# center the elements vertically
section { align-self: flex-end; }				# align individual element at the bottom
section { flex-direction: row; }				# items are placed to the text direction
section { flex-direction: row-reverse; }		# items are placed opposite to the text direction
section { flex-direction: column; }				# items are placed top to bottom
section { flex-direction: column-reverse; }		# items are placed top to bottom  oppostie to the text direction
section { flex-wrap: nowrap; }					# show every item in a single line in the flexcontainer section
section { flex-wrap: wrap; } 					# wrap elements to next line in the flexcontainer section
section { flex-flow: row wrap; }				# combination from direction + row (same as flex-direction:	row and flex-wrap: wrap)
article { flex: 1 200px; }						# gives the flex-item 1 proportion value (when there are 3 items - every item gets the same space)
article:nth-of-type(3) { flex: 2 200px; }		# gives the 3rd item 2 proportion (item 1+2 get 1/4 of the space - item 3 gets 1/2 of the space)
button:first-child { align-self: flex-end; }	# overwrites the vertical position of the item in the flexcontainer
button:first-child { order: 1; }				# change the order of the first item (everything has order 0 - with 1 it goes to the very right position)
button:last-child { order: -1; }				# change the order of the last item (everything has order 0 - with -1 it goes to the very first position)



### Responsive Design
Running the page on smaller devices
- Fluid - everathing as a percentage (no percents)
- Elastic - using em and rem (em looks at the previous element / rem looks at the html-element)
(only changing the font-size central when changes)
- Content Decision - Mobile First

section {
	height: 200px;
	border 1px solid black;
	flex: 1;				# use the full length of the width	
}
main,.bottom {				# arranges elements in main and class bottom with flex-system
	display: flex;
}




### Media Queries
@media screen and (max-width: 600px) {			# this rule get only be used when the device width is between 0 and 600 pixel
	h1 {
		color: blue;
	}
}
	
	
	
### HTML Template
<!DOCTYPE html>																	<!-- indicates it is used HTML5-->
<html lang="en">																<!-- language of the page-->
	<head>
    	<meta charset="utf-8">													<!-- get all chars which are possible-->
    	<meta name="description" content="Your description goes here">			<!-- used by search-engines to lookup a site-->
    	<meta name="keywords" content="one, two, three">						<!-- keywords for search-enginges-->
		<meta name="viewport" content="width=device-width, initial-scale=1">	<!-- set the width of the device-->

		<title>Blank Template</title>											<!-- tabname in the browser-->

		<!-- external CSS link -->
		<link rel="stylesheet" href="css/normalize.css">						<!-- use the standards from the browsers
		<link rel="stylesheet" href="css/style.css">
	</head>
	<body>
		<script type="text/javascript" src="js/main.js"></script>
	</body>
</html>	



### CSS Template - style.css
/* Box Model Hack */
* {
     box-sizing: border-box;
}

/* Clear fix hack */
.clearfix:after {
     content: ".";
     display: block;
     clear: both;
     visibility: hidden;
     line-height: 0;
     height: 0;
}
.clear {
	clear: both;
}
/******************************************
/* BASE STYLES
/*******************************************/
body {
}
/******************************************
/* LAYOUT
/*******************************************/
header {
}
footer {
}
/******************************************
/* ADDITIONAL STYLES
/*******************************************/







